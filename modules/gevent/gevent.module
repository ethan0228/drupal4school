<?php
/**
 * @file
 * sims authentication module for Drupal.
 */

require_once 'gevent.api.php';

/**
 * Implements hook_update_projects_alter().
 */
function gevent_update_projects_alter(&$projects) {
  unset($projects['gevent']);
}

/**
 * Implements hook_init().
 */
function gevent_init() {
  $path = libraries_get_path('google-api-php-client');
  if ($path) {
    set_include_path($path . "/src/Google" . PATH_SEPARATOR . get_include_path());
  }
}

/**
 * Implements hook_menu().
 */
function gevent_menu() {
  $items = array();

  $items['admin/config/date/gevent'] = array(
    'title' => t('Google Calendar Sync settings'),
    'description' => t('Control the various settings of the Google Calendar Sync module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gevent_settings'),
    'access arguments' => array('administer sims authentication'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  $path = variable_get('gevent_calendar_view_path');
  if (!empty($path)) {
    $items[$path . '/tradition'] = array(
      'title' => t('School Calendar'),
      'page callback' => 'gevent_traditional_calendar',
      'access callback' => TRUE,
      'weight' => 99,
      'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function gevent_admin_paths() {
  return array(
    'admin/config/date/gevent' => TRUE,
  );
}

/**
 * Implements hook_help().
 */
function gevent_help($path, $arg) {
  switch ($path) {
    case 'admin/config/date/gevent':
      $output = '<p>' . t('This module sync your custom content-type to Google Calendar.') . '</p>';
      $output .= '<p></p>';
      return $output;
  }
}

/**
 * Implements hook_form_BASE_FORM_alter().
 */
function gevent_form_node_form_alter(&$form, $form_state, $form_id) {
  $node_type = $form['#node']->type;
  if (variable_get('gevent_enable') && $node_type == variable_get('gevent_node_type')) {
    $calendar_id_field = variable_get('gevent_field_calendar_id');
    unset($form[$calendar_id_field]);
    $event_id_field = variable_get('gevent_field_event_id');
    unset($form[$event_id_field]);
  }
}

/**
 * Implements hook_node_insert().
 */
function gevent_node_insert($node) {
  global $calendar;
  if (variable_get('gevent_enable') && $node->type == variable_get('gevent_node_type')) {
    $calendar = gevent_service();
    $event = new Google_Service_Calendar_Event();
    $title_field = variable_get('gevent_field_title');
    if (substr($title_field, 0, 6) == 'field_') {
      $title_obj= $node->$title_field;
        if (isset($title_obj['und'][0])) {
          $title = $title_obj['und'][0]['value'];
        }
    }
    else {
      $title = $node->$title_field;
    }
    $event->setSummary($title);

    $memo_field = variable_get('gevent_field_memo');
    if ($memo_field != 'none') {
      if (substr($memo_field, 0, 6) == 'field_') {
        $memo_obj = $node->$memo_field;
        if (isset($memo_obj['und'][0])) {
          $memo = $memo_obj['und'][0]['value'];
        }
      }
      else {
        $memo = $node->$memo_field;
      }
      if (!empty($memo)) $event->setDescription($memo);
    }

    $place_field = variable_get('gevent_field_place');
    if ($place_field != 'none') {
      if (substr($place_field, 0, 6) == 'field_') {
        $place_obj = $node->$place_field;
        if (isset($place_obj['und'][0])) {
          $place = $place_obj['und'][0]['value'];
	}
      }
      else {
        $place = $node->$place_field;
      }
      if (!empty($place)) $event->setLocation($place);
    }

    $teachers_field = variable_get('gevent_field_attendee');
    if ($teachers_field != 'none') {
      if (substr($teachers_field, 0, 6) == 'field_') {
        $teachers_obj = $node->$teachers_field;
	$teachers = $teachers_obj['und'];
      }
      if (count($teachers)>0) {
        $attendees = array();
        foreach ($teachers as $delta => $value) {
	  $teaid = $value['value'];
	  $sql = 'SELECT TEANAME,TEAMAIL from TEABAS where TEAID=?';
          $rs = db2_query($sql, array($teaid));
	  if ($row = db2_fetch_array($rs)) {
            $teaname = $row[0];
	    $teamail = $row[1];
            $attendee = new Google_Service_Calendar_EventAttendee();
            $attendee->setId($teaid);
            $attendee->setEmail($teamail);
            $attendee->setDisplayName($teaname);
	    $attendees[] = $attendee;
	  }
        }
	if (count($attendees)>0) $event->setAttendees($attendees);
      }
    }

    $date_field = variable_get('gevent_field_date');
    $date_obj = $node->$date_field;
    $timezone = $date_obj['und'][0]['timezone'];
    $event_start = new Google_Service_Calendar_EventDateTime();
    $event_end = new Google_Service_Calendar_EventDateTime();
    $event_start->setTimeZone($timezone);
    $event_end->setTimeZone($timezone);
    $start_date = date_create($date_obj['und'][0]['value'], timezone_open('UTC'));
    date_timezone_set($start_date, timezone_open($timezone));
    $end_date = date_create($date_obj['und'][0]['value2'], timezone_open('UTC'));
    date_timezone_set($end_date, timezone_open($timezone));
    if ($date_obj['und'][0]['all_day'] == 1) {
      $event_start->setDate(date_format($start_date, 'Y-m-d'));
      $event_end->setDate(date_format($end_date, 'Y-m-d'));
    }
    else {
      $event_start->setDateTime(date_format($start_date, 'Y-m-d\TH:i:sP'));
      $event_end->setDateTime(date_format($end_date, 'Y-m-d\TH:i:sP'));
    }
    $event->setStart($event_start);
    $event->setEnd($event_end);
    $rrule = $date_obj['und'][0]['rrule'];
    $event->setRecurrence($rrule);
    
    $user = user_load($node->uid);
    $creator = new Google_Service_Calendar_EventCreator();
    $creator->setId($user->uid);
    if (isset($user->email)) {
      $creator->setEmail($user->email);
    }
    $creator->setDisplayName($user->titlename . ' ' . $user->realname);
    $event->setCreator($creator);
    
    if (variable_get('gevent_calendar_taxonomy')) {
      $taxonomy_field = variable_get('gevent_field_taxonomy');
      $term_obj = $node->$taxonomy_field;
      $term = $term_obj['und'][0]['tid'];
      $calendar_id = variable_get('gevent_calendar_term_' . $term);
    }
    else {
      $calendar_id = variable_get('gevent_calendar_id');
    }
    $event = $calendar->events->insert($calendar_id, $event);

    $id_field = field_info_field(variable_get('gevent_field_calendar_id'));
    $id_storage = $id_field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
    $table_name = key($id_storage);
    $field_name = $id_storage[$table_name]['value'];
    $result = db_insert($table_name)
      ->fields(array(
        'entity_type' => 'node',
        'bundle' => variable_get('gevent_node_type'),
        'deleted' => 0,
        'entity_id' => $node->nid,
        'revision_id' => $node->vid,
        'language' => 'und',
        'delta' => 0,
        $field_name => $calendar_id,
      ))
      ->execute();

    $event_id = $event->getId();
    $id_field = field_info_field(variable_get('gevent_field_event_id'));
    $id_storage = $id_field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
    $table_name = key($id_storage);
    $field_name = $id_storage[$table_name]['value'];
    $result = db_insert($table_name)
      ->fields(array(
        'entity_type' => 'node',
        'bundle' => variable_get('gevent_node_type'),
        'deleted' => 0,
        'entity_id' => $node->nid,
        'revision_id' => $node->vid,
        'language' => 'und',
        'delta' => 0,
        $field_name => $event_id,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function gevent_node_update($node) {
  global $calendar;
  if (variable_get('gevent_enable') && $node->type == variable_get('gevent_node_type')) {
    $calendar = gevent_service();
    $calendar_id_field = variable_get('gevent_field_calendar_id');
    if (substr($calendar_id_field, 0, 6) == 'field_') {
      $calendar_id_obj = $node->$calendar_id_field;
      if (isset($calendar_id_obj['und'][0])) {
        $calendar_id = $calendar_id_obj['und'][0]['value'];
      }
    }
    else {
      $calendar_id = $node->$calendar_id_field;
    }
    $event_id_field = variable_get('gevent_field_event_id');
    if (substr($event_id_field, 0, 6) == 'field_') {
      $event_id_obj = $node->$event_id_field;
      if (isset($event_id_obj['und'][0])) {
        $event_id = $event_id_obj['und'][0]['value'];
      }
    }
    else {
      $event_id = $node->$event_id_field;
    }
    try {
      $event = $calendar->events->get($calendar_id, $event_id);
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
    if (!$event) return;
    
    $title_field = variable_get('gevent_field_title');
    if (substr($title_field, 0, 6) == 'field_') {
      $title_obj= $node->$title_field;
      if (isset($title_obj['und'][0])) {
        $title = $title_obj['und'][0]['value'];
      }
    }
    else {
      $title = $node->$title_field;
    }
    $event->setSummary($title);

    $memo_field = variable_get('gevent_field_memo');
    if ($memo_field != 'none') {
      if (substr($memo_field, 0, 6) == 'field_') {
        $memo_obj = $node->$memo_field;
        if (isset($memo_obj['und'][0]['value'])) {
          $memo = $memo_obj['und'][0]['value'];
        }
      }
      else {
        $memo = $node->$memo_field;
      }
      if (!empty($memo)) $event->setDescription($memo);
    }

    $place_field = variable_get('gevent_field_place');
    if ($place_field != 'none') {
      if (substr($place_field, 0, 6) == 'field_') {
        $place_obj = $node->$place_field;
        if (isset($place_obj['und'][0]['value'])) {
          $place = $place_obj['und'][0]['value'];
        }
      }
      else {
        $place = $node->$place_field;
      }
      if (!empty($place)) $event->setLocation($place);
    }

    $teachers_field = variable_get('gevent_field_attendee');
    if ($teachers_field != 'none') {
      if (substr($teachers_field, 0, 6) == 'field_') {
        $teachers_obj = $node->$teachers_field;
	$teachers = $teachers_obj['und'];
      }
      if (count($teachers)>0) {
        $attendees = array();
        foreach ($teachers as $delta => $value) {
	  $teaid = $value['value'];
	  $sql = 'SELECT TEANAME,TEAMAIL from TEABAS where TEAID=?';
          $rs = db2_query($sql, array($teaid));
	  if ($row = db2_fetch_array($rs)) {
            $teaname = $row[0];
	    $teamail = $row[1];
            $attendee = new Google_Service_Calendar_EventAttendee();
            $attendee->setId($teaid);
            $attendee->setEmail($teamail);
            $attendee->setDisplayName($teaname);
	    $attendees[] = $attendee;
	  }
        }
	if (count($attendees)>0) $event->setAttendees($attendees);
      }
    }

    $date_field = variable_get('gevent_field_date');
    $date_obj = $node->$date_field;
    $timezone = $date_obj['und'][0]['timezone'];
    $event_start = new Google_Service_Calendar_EventDateTime();
    $event_end = new Google_Service_Calendar_EventDateTime();
    $event_start->setTimeZone($timezone);
    $event_end->setTimeZone($timezone);
    $start_date = date_create($date_obj['und'][0]['value'], timezone_open('UTC'));
    date_timezone_set($start_date, timezone_open($timezone));
    $end_date = date_create($date_obj['und'][0]['value2'], timezone_open('UTC'));
    date_timezone_set($end_date, timezone_open($timezone));
    if ($date_obj['und'][0]['all_day'] == 1) {
      $event_start->setDate(date_format($start_date, 'Y-m-d'));
      $event_end->setDate(date_format($end_date, 'Y-m-d'));
    }
    else {
      $event_start->setDateTime(date_format($start_date, 'Y-m-d\TH:i:sP'));
      $event_end->setDateTime(date_format($end_date, 'Y-m-d\TH:i:sP'));
    }
    $event->setStart($event_start);
    $event->setEnd($event_end);
    $rrule = $date_obj['und'][0]['rrule'];
    $event->setRecurrence($rrule);
    $event = $calendar->events->patch($calendar_id, $event_id, $event);

    if (variable_get('gevent_calendar_taxonomy')) {
      $taxonomy_field = variable_get('gevent_field_taxonomy');
      $term_obj = $node->$taxonomy_field;
      $term = $term_obj['und'][0]['tid'];
      $calendar_newid = variable_get('gevent_calendar_term_' . $term);
    }
    else {
      $calendar_newid = variable_get('gevent_calendar_id');
    }
    if ($calendar_newid != $calendar_id) {
      $event = $calendar->events->move($calendar_id, $event_id, $calendar_newid);
  
      $id_field = field_info_field(variable_get('gevent_field_calendar_id'));
      $id_storage = $id_field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
      $table_name = key($id_storage);
      $field_name = $id_storage[$table_name]['value'];
      $result = db_update($table_name)
        ->fields(array(
          $field_name => $calendar_newid,
        ))
        ->condition('entity_type', 'node', '=')
        ->condition('bundle', variable_get('gevent_node_type'), '=')
        ->condition('entity_id', $node->nid, '=')
        ->execute();

      $event_newid = $event->getId();
      $id_field = field_info_field(variable_get('gevent_field_event_id'));
      $id_storage = $id_field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
      $table_name = key($id_storage);
      $field_name = $id_storage[$table_name]['value'];
      $result = db_update($table_name)
        ->fields(array(
          $field_name => $event_newid,
        ))
        ->condition('entity_type', 'node', '=')
        ->condition('bundle', variable_get('gevent_node_type'), '=')
        ->condition('entity_id', $node->nid, '=')
        ->execute();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function gevent_node_delete($node) {
  global $calendar;
  if (variable_get('gevent_enable') && $node->type == variable_get('gevent_node_type')) {
    $calendar = gevent_service();
    $calendar_id_field = variable_get('gevent_field_calendar_id');
    if (substr($calendar_id_field, 0, 6) == 'field_') {
      $calendar_id_obj = $node->$calendar_id_field;
      if (isset($calendar_id_obj['und'][0])) {
        $calendar_id = $calendar_id_obj['und'][0]['value'];
      }
    }
    else {
      $calendar_id = $node->$calendar_id_field;
    }
    $event_id_field = variable_get('gevent_field_event_id');
    if (substr($event_id_field, 0, 6) == 'field_') {
      $event_id_obj = $node->$event_id_field;
      if (isset($event_id_obj['und'][0])) {
        $event_id = $event_id_obj['und'][0]['value'];
      }
    }
    else {
      $event_id = $node->$event_id_field;
    }
    try {
      $event = $calendar->events->get($calendar_id, $event_id);
      if ($event) $event = $calendar->events->delete($calendar_id, $event_id);
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
}

/**
 * Implements settings for the module.
 */
function gevent_settings($form, &$form_state) {
  global $calendar;
  $all_types = node_type_get_types();
  $my_types = array();
  foreach ($all_types as $node_type => $attribes) {
    $flag=FALSE;
    $fields = field_info_instances('node', $node_type);
    foreach ($fields as $field) {
      if ($field['widget']['module'] == 'date') $flag = TRUE;
    }
    if ($flag) $my_types[$node_type] = $all_types[$node_type]->name;
  }

  $form['gevent_node_type'] = array(
    '#type' => 'select',
    '#title' => t('The custom node type you want to sync to Google Calendar.'),
    '#options' => $my_types,
    '#default_value' => variable_get('gevent_node_type', ''),
    '#description' => t('Here will list only these node type that contain date module field.'),
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'reload_node_fields_ajax_callback',
    ),
  );

  $node_type = variable_get('gevent_node_type');
  if (empty($node_type) && count($my_types)>0) {
    $node_type = key($my_types);
  }
  $my_fields['none'] = t('- None -');
  $teacher_field['none'] = t('- None -');
  if ($all_types[$node_type]->has_title) {
    $my_fields['title'] = $all_types[$node_type]->title_label;
  }
  $fields = field_info_instances('node', $node_type);
  foreach ($fields as $field_name => $field) {
    $field_info = field_info_field($field_name);
    $type = $field_info['type'];
    if (isset($field['display']['default']['module']) && $field['display']['default']['module'] == 'taxonomy') {
      variable_set('gevent_field_taxonomy', $field_name);
      $machine_name = $field_info['settings']['allowed_values'][0]['vocabulary'];
      $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
      $terms = taxonomy_get_tree($vocabulary->vid);
    }
    elseif ($field['widget']['module'] == 'date') {
      variable_set('gevent_field_date', $field['field_name']);
    }
    elseif ($field['widget']['module'] == 'text') {
      $my_fields[$field_name] = $field['label'];
    }
    elseif ($type == 'sims_field_teachers') {
      $teacher_field[$field_name] = $field['label'];
    }
  }

  $form['gevent_field_title'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event title.'),
    '#options' => $my_fields,
    '#default_value' => variable_get('gevent_field_title', ''),
    '#description' => t('Here will list only these fields except date module field.'),
    '#required' => TRUE,
  );

  $form['gevent_field_memo'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event description.'),
    '#options' => $my_fields,
    '#default_value' => variable_get('gevent_field_memo', ''),
    '#description' => t('Here will list only these fields except date module field.'),
  );

  $form['gevent_field_place'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event where.'),
    '#options' => $my_fields,
    '#default_value' => variable_get('gevent_field_place', ''),
    '#description' => t('Here will list only these fields except date module field.'),
  );

  $form['gevent_field_attendee'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event attendee.'),
    '#options' => $teacher_field,
    '#default_value' => variable_get('gevent_field_attendee', ''),
    '#description' => t('Here will list only these fields except sims field: List (teachers).'),
  );

  $form['gevent_field_calendar_id'] = array(
    '#type' => 'select',
    '#title' => t('The custom field to store Google Calendar ID.'),
    '#options' => $my_fields,
    '#default_value' => variable_get('gevent_field_calendar_id', ''),
    '#description' => t('Here will list only these fields except date module field.'),
    '#required' => TRUE,
  );

  $form['gevent_field_event_id'] = array(
    '#type' => 'select',
    '#title' => t('The custom field to store Google Calendar Event ID.'),
    '#options' => $my_fields,
    '#default_value' => variable_get('gevent_field_event_id', ''),
    '#description' => t('Here will list only these fields except date module field.'),
    '#required' => TRUE,
  );

  $default_domain = variable_get('gevent_domain', 'teacher');
  $form['gevent_domain'] = array(
    '#type' => 'select',
    '#title' => t('Which Google Apps Domain you want to sync?'),
    '#options' => array('teacher' => t('teacher domain'), 'student' => t('student domain')),
    '#default_value' => $default_domain,
    '#description' => t('Please select the Google Apps main domain for Calendar Management.'),
    '#required' => TRUE,
  );

  $form['gevent_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Calendar Owner'),
    '#default_value' => variable_get('gevent_admin', ''),
    '#description' => t('Please input the Google Calendar Owner account.'),
    '#required' => TRUE,
  );

  if (variable_get('gevent_enable')) {
    $my_calendars = array();
    $calendar = gevent_service();
    if ($calendar) {
      try {
        $calendars = $calendar->calendarList->listCalendarList();
        foreach ($calendars->getItems() as $calendarListEntry) {
          $my_calendars[$calendarListEntry->getId()] = $calendarListEntry->getSummary();
        }
        if (is_array($terms) && count($terms)>0) {
          $form['gevent_calendar_taxonomy'] = array(
            '#type' => 'checkbox',
            '#title' => t('Do you want to sync Google Calendar by taxonomy terms?'),
            '#default_value' => variable_get('gevent_calendar_taxonomy', TRUE),
          );
          $form['gevent_calendar_id'] = array(
            '#type' => 'select',
            '#title' => t('Which Google Calendar you want to sync?'),
            '#options' => $my_calendars,
            '#default_value' => variable_get('gevent_calendar_id', ''),
            '#states' => array(
              'invisible' => array(
                ':input[name="gevent_calendar_taxonomy"]' => array('checked' => TRUE),
              ),  
            ),
          );
          foreach ($terms as $term) {
            $form['gevent_calendar_term_' . $term->tid] = array(
              '#type' => 'select',
              '#title' => t('Which Google Calendar you want to sync by @term?', array('@term' => $term->name)),
              '#options' => $my_calendars,
              '#default_value' => variable_get('gevent_calendar_term_' . $term->tid, ''),
              '#states' => array(
                'invisible' => array(
                  ':input[name="gevent_calendar_taxonomy"]' => array('checked' => FALSE),
                ),  
              ),
            );
          }
        }
        else {
          $form['gevent_calendar_id'] = array(
            '#type' => 'select',
            '#title' => t('Which Google Calendar you want to sync?'),
            '#options' => $my_calendars,
            '#default_value' => variable_get('gevent_calendar_id', ''),
          );
        }
      } catch (Exception $e) {
        $form['gevent_info'] = array(
          '#type' => 'item',
          '#markup' => t('Please submit this form first, then module will test Google Calendar connection, after that you can complete the module settings.'),
        );
      }
    }
  }
  else {
    $form['gevent_info'] = array(
      '#type' => 'item',
      '#markup' => t('Please submit this form first, then module will test Google Calendar connection, after that you can complete the module settings.'),
    );
  }

  $form['gevent_calendar_view_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Calendar View Path:'),
    '#default_value' => variable_get('gevent_calendar_view_path', ''),
    '#description' => t('The traditional calendar view will add to this path as a tab. please do not include the sub view name, example: input <em>calendar</em> not <em>calendar/month</em>.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  $form['#submit'] = array('gevent_server_test');
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }

  return $form;
}

/**
 * Implements reload_node_fields_callback().
 */
function reload_node_fields_ajax_callback($form, $form_state) {
  $node_type = $form_state['values']['gevent_node_type'];
  $my_fields['none'] = '- None -';
  $teacher_field['none'] = '- None -';
  $node_type = node_type_get_type($node_type);
  if ($node_type->has_title) {
    $my_fields['title'] = $node_type->title_label;
  }
  $fields = field_info_instances('node', $node_type->type);
  foreach ($fields as $field_name => $field) {
    $field_info = field_info_field($field_name);
    $type = $field_info['type'];
    if (isset($field['display']['default']['module']) && $field['display']['default']['module'] == 'taxonomy') {
      variable_set('gevent_field_taxonomy', $field_name);
      $machine_name = $field_info['settings']['allowed_values'][0]['vocabulary'];
      $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
      $terms = taxonomy_get_tree($vocabulary->vid);
    }
    elseif ($field['widget']['module'] == 'date') {
      variable_set('gevent_field_date', $field['field_name']);
    }
    elseif ($field['widget']['module'] == 'text') {
      $my_fields[$field_name] = $field['label'];
    }
    elseif ($type == 'sims_field_teachers') {
      $teacher_field[$field_name] = $field['label'];
    }
  }
  $form['gevent_field_title'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event title.'),
    '#options' => $my_fields,
    '#default_value' => '',
    '#description' => t('Here will list only these fields except date module field.'),
    '#required' => TRUE,
  );

  $form['gevent_field_memo'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event description.'),
    '#options' => $my_fields,
    '#default_value' => '',
    '#description' => t('Here will list only these fields except date module field.'),
  );

  $form['gevent_field_place'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event where.'),
    '#options' => $my_fields,
    '#default_value' => '',
    '#description' => t('Here will list only these fields except date module field.'),
  );

  $form['gevent_field_attendee'] = array(
    '#type' => 'select',
    '#title' => t('The custom field sync to Google Calendar event attendee.'),
    '#options' => $teacher_field,
    '#default_value' => variable_get('gevent_field_attendee', ''),
    '#description' => t('Here will list only these fields except sims field: List (teachers).'),
  );

  $form['gevent_field_calendar_id'] = array(
    '#type' => 'select',
    '#title' => t('The custom field to store Google Calendar ID.'),
    '#options' => $my_fields,
    '#default_value' => '',
    '#description' => t('Here will list only these fields except date module field.'),
    '#required' => TRUE,
  );

  $form['gevent_field_event_id'] = array(
    '#type' => 'select',
    '#title' => t('The custom field to store Google Calendar Event ID.'),
    '#options' => $my_fields,
    '#default_value' => '',
    '#description' => t('Here will list only these fields except date module field.'),
    '#required' => TRUE,
  );
  $commands = array();
  $commands[] = ajax_command_replace('name="gevent_field_title"', render($form['gevent_field_title']));
  $commands[] = ajax_command_replace('name="gevent_field_memo"', render($form['gevent_field_memo']));
  $commands[] = ajax_command_replace('name="gevent_field_place"', render($form['gevent_field_place']));
  $commands[] = ajax_command_replace('name="gevent_field_calendar_id"', render($form['gevent_field_calendar_id']));
  $commands[] = ajax_command_replace('name="gevent_field_event_id"', render($form['gevent_field_event_id']));

  if (variable_get('gevent_enable')) {
    $my_calendars = array();
    $calendar = gevent_service();
    $calendars = $calendar->calendarList->listCalendarList();
    foreach ($calendars->getItems() as $calendarListEntry) {
      $my_calendars[$calendarListEntry->getId()] = $calendarListEntry->getSummary();
    }
    if (is_array($terms) && count($terms)>0) {
      $form['gevent_calendar_id'] = array(
        '#type' => 'select',
        '#title' => t('Which Google Calendar you want to sync?'),
        '#options' => $my_calendars,
        '#default_value' => variable_get('gevent_calendar_id', ''),
        '#states' => array(
          'invisible' => array(
            ':input[name="gevent_calendar_taxonomy"]' => array('checked' => TRUE),
          ),  
        ),
      );
      $commands[] = ajax_command_replace('name="gevent_calendar_id"', render($form['gevent_calendar_id']));

      foreach ($terms as $term) {
        $form['gevent_calendar_term_' . $term->tid] = array(
          '#type' => 'select',
          '#title' => t('Which Google Calendar you want to sync by @term?', array('@term' => $term->name)),
          '#options' => $my_calendars,
          '#default_value' => variable_get('gevent_calendar_term_' . $term->tid, ''),
          '#states' => array(
            'invisible' => array(
              ':input[name="gevent_calendar_taxonomy"]' => array('checked' => FALSE),
            ),  
          ),
        );
        $commands[] = ajax_command_replace('name="gevent_calendar_term_' . $term->tid . '"', render($form['gevent_calendar_term_' . $term->tid]));
      }
    }
    else {
      $form['gevent_calendar_id'] = array(
        '#type' => 'select',
        '#title' => t('Which Google Calendar you want to sync?'),
        '#options' => $my_calendars,
        '#default_value' => variable_get('gevent_calendar_id', ''),
        '#required' => TRUE,
      );
      $commands[] = ajax_command_replace('name="gevent_calendar_id"', render($form['gevent_calendar_id']));
    }
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements gevent_server_test().
 */
function gevent_server_test($form, &$form_state) {
  global $calendar;
  $error = '';
  form_state_values_clean($form_state);
  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    variable_set($key, trim($value));
  }

  $domain = variable_get('gevent_domain');
  if ($domain == 'teacher') {
    $domain_name = variable_get('gapps_teacher_domain');
  }
  else {
    $domain_name = variable_get('gapps_student_domain');
  }
  $admin = variable_get('gevent_admin');
  if (!empty($domain_name) && !empty($admin) && !strpos($admin, '@')) {
    variable_set('gevent_admin', $admin . '@' . $domain_name);
  }

  $message = '';
  if (gevent_test() && variable_get('gevent_field_title', 'none')!='none' && variable_get('gevent_field_calendar_id', 'none')!='none' && variable_get('gevent_field_event_id', 'none')!='none') {
    variable_set('gevent_enable', TRUE);
    $message .= t('All setting looks great!');
  }
  else {
    variable_set('gevent_enable', FALSE);
    $message .= t('Something wrong, Please check your settings again!');
  }
  drupal_set_message($message . t('The configuration options have been saved.'));
}

/**
 * Private function gevent_traditional_calendar().
 */
function gevent_traditional_calendar() {
  drupal_add_css(drupal_get_path('module', 'gevent') . '/gevent_print.css');
  date_default_timezone_set('Asia/Taipei');
  if (date('m') > 7) {
    $syear = date('Y');
    $eyear = $syear + 1;
    $stryear = $syear;
    $seme = 1;
  }
  elseif (date('m') < 2) {
    $eyear = date('Y');
    $syear = $eyear - 1;
    $stryear = $syear;
    $seme = 1;
  }
  else {
    $syear = date('Y');
    $eyear = $syear;
    $stryear = $syear - 1;
    $seme = 2;
  }
  $node_type = variable_get('gevent_node_type');
  $date_field_name = variable_get('gevent_field_date');
  $date_field = field_info_field($date_field_name);
  $date_storage = $date_field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $date_table = key($date_storage);
  $value1_field = $date_storage[$date_table]['value'];
  $value2_field = $date_storage[$date_table]['value2'];
  $rrule_field = $date_storage[$date_table]['rrule'];
  $output = '<TABLE class="views-table cols-4">';
  $output .= '<thead><TR>';
  $output .= '<Th class="views-field" colspan="4" style="text-align: center; font-size: 150%">第' . ($stryear-1911) . '學年第' . $seme . '學期行事曆 <a href="javascript:window.print()">友善列印</a></Th>';
  $output .= '</TR><TR>';
  $output .= '<Th class="views-field" width="16" style="text-align: center;">月</Th>';
  $output .= '<Th class="views-field" width="16" style="text-align: center;">日</Th>';
  $output .= '<Th class="views-field" width="32" style="text-align: center;">星期</Th>';
  $output .= '<Th class="views-field" style="text-align: center;">行　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　事</Th>';
  $output .= '</TR></thead><tbody>';
  for ($y=$syear;$y<=$eyear;$y++) {
    if ($seme == 1) {
      if ($y == $syear) {
        $ms = 8;
        $me = 12;
      }
      else {
        $ms = 1;
        $me = 1;
      }
    }
    else {
      $ms = 2;
      $me = 7;
    }
    for ($m=$ms;$m<=$me;$m++) {
      $days = date('j', strtotime('last day of this month', strtotime("$y-$m-02")));
      for ($d=1;$d<=$days;$d++) {
        $meeting = date('w', mktime(0, 0, 0, $m, $d, $y));
        switch ($meeting) {
          case 0:
            $cweekday = "<TD align=center bgcolor=#FF0000><font color=#FFFFFF>日</font></TD>";
            break;
          case 1:
            $cweekday = "<TD align=center>一</TD>";
            break;
          case 2:
            $cweekday = "<TD align=center>二</TD>";
            break;
          case 3:
            $cweekday = "<TD align=center>三</TD>";
            break;
          case 4:
            $cweekday = "<TD align=center>四</TD>";
            break;
          case 5:
            $cweekday = "<TD align=center>五</TD>";
            break;
          case 6:
            $cweekday = "<TD align=center bgcolor=#FF0000><font color=#FFFFFF>六</font></TD>";
            break;
        }
        $output .= "<TR>";
        $output .= "<TD align=center>$m</TD>";
        $output .= "<TD align=center>$d</TD>";
        $output .= $cweekday . "<td>";
        $events = array();
        $day_offset = date_create("$y-$m-$d", timezone_open('Asia/Taipei'));
        $sdate = $day_offset->format('Y-m-d');
        $sql = "SELECT a.nid AS nid, a.uid AS uid FROM {node} a LEFT JOIN {$date_table} b ON a.nid = b.entity_id AND (b.entity_type = 'node' AND b.deleted = '0') WHERE (a.status = '1') AND (a.type = '$node_type') AND (b.$value1_field <= '$sdate') AND (b.$value2_field >= '$sdate') ORDER BY b.$value1_field ASC";
        $result = db_query($sql);
        foreach ($result as $row) {
          $node = node_load($row->nid);
          if (!node_access('view', $node)) continue;
          $account = user_load($row->uid);
          $title_field = variable_get('gevent_field_title');
          if (substr($title_field, 0, 6) == 'field_') {
            $title_obj= $node->$title_field;
            if (count($title_obj)>0) {
              $title = $title_obj['und'][0]['value'];
            }
            else {
              $title = '';
            }  
          }
          else {
            $title = $node->$title_field;
          }
          $memo_field = variable_get('gevent_field_memo');
          if (substr($memo_field, 0, 6) == 'field_') {
            $memo_obj= $node->$memo_field;
            if (count($memo_obj)>0) {
              $memo = $memo_obj['und'][0]['value'];
            }
            else {
              $memo = '';
            }
          }
          else {
            $memo = $node->$memo_field;
          }
          $place_field = variable_get('gevent_field_place');
          if (substr($place_field, 0, 6) == 'field_') {
            $place_obj= $node->$place_field;
            if (count($place_obj)>0) {
              $place = $place_obj['und'][0]['value'];
            }
            else {
              $place = '';
            }
          }
          else {
            $place = $node->$place_field;
          }
          $date_obj_field = $node->$date_field_name;
          $date1_obj = $date_obj_field['und'][0]['db']['value'];
          $date2_obj = $date_obj_field['und'][0]['db']['value2'];
          $date1_obj->setTimezone(new DateTimeZone('Asia/Taipei'));
          $date2_obj->setTimezone(new DateTimeZone('Asia/Taipei'));
          $time1 = $date1_obj->format('U');
          $time2 = $date2_obj->format('U');
          $show = $title;
          if ($time1 == $time2) {
            $show .= '(全天)';
          }
          else {
            $start = $date1_obj->toArray();
            $end = $date2_obj->toArray();
            if ($start['year'] == $end['year']) {
              if ($start['month'] == $end['month']) {
                if ($start['day'] == $end['day']) {
                  $show .= '(' . $date1_obj->format('H:i') . '到' . $date2_obj->format('H:i') . '止)';
                }
                else {
                  $show .= '(' . $date1_obj->format('j日') . '到' . $date2_obj->format('j日') . '止)';
                }
              }
              else {
                $show .= '(' . $date1_obj->format('n月j日') . '到' . $date2_obj->format('n月j日') . '止)';
              }
            }
            else {
              $show .= '(' . $date1_obj->format('Y年n月j日') . '到' . $date2_obj->format('Y年n月j日') . '止)';
            }
          }
          if ($place) {
            $show .= ' 地點：' . $place;
          }
          if ($memo) {
            $show .= ' 備註：' . $memo;
          }
          $found = FALSE;
          foreach ($events as $key => $event) {
            if ($event->depname == $account->depname) {
              $events[$key]->show .= $show;
              $found = TRUE;
            }
          }
          if (!$found) {
            $event = new stdClass();
	        $event->depname = $account->depname;
	        $event->show = $show;
            $events[] = $event;
          }
        }
        foreach ($events as $key => $event) {
          $output .= '【<span style="color:red;">' . $event->depname . '</span>】' . $event->show;
        }
      }
      $output .= "</TD>";
      $day_offset = date_add($day_offset, date_interval_create_from_date_string('1 day'));
    }
  }
  $output .= "</tbody></table>";
  return $output;
}
