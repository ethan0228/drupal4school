<?php

/**
 * @file
 * sims authentication module for Drupal.
 */
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\UserInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\user\Entity\User;
use Drupal\user\Entity\Role;
use Drupal\user\Form\UserLoginForm;

require_once 'sims.api.php';

/**
 * Implements hook_update_projects_alter().
 */
function simsauth_update_projects_alter(&$projects) {
  $projects['simsauth'] = array(
    'info' => array(
      'project status url' => 'http://drupal.tp.edu.tw/projects/%core/%project/',
    ),
  );
  unset($projects['simsauth']);
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function simsauth_locale_translation_projects_alter(&$projects) {
  $projects['simsauth'] = array(
    'info' => array(
      'interface translation server pattern' => 'http://drupal.tp.edu.tw/translations/%core/%project/%project-%version.%language.po',
    ),
  );
}

/**
 * Implements hook_help().
 */
function simsauth_help($path, $arg) {
  switch ($path) {
    case 'admin/config/people/simsauth':
      $output = '<p>' . t('This module integrates Drupal with external authentication to meet the need of Taipei Primary Schools. They use two services to manage their accounts, an IBM DB2 database service for account management server where the users infomation was stored, and a LDAP service for authentication server where stored users passwords.') . '</p>';
      $output .= '<p></p>';
      return $output;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function simsauth_entity_extra_field_info() {
  $fields['user']['user']['display']['birthday'] = array(
    'label' => t('Birthday'),
    'description' => t('simsauth module \'birthday\' view element.'),
    'weight' => 10,
  );
  $fields['user']['user']['display']['gender'] = array(
    'label' => t('Gender'),
    'description' => t('simsauth module \'gender\' view element.'),
    'weight' => 11,
  );
  $fields['user']['user']['display']['depname'] = array(
    'label' => t('Department'),
    'description' => t('simsauth module \'department\' view element.'),
    'weight' => 12,
  );
  $fields['user']['user']['display']['stdno'] = array(
    'label' => t('Student No'),
    'description' => t('simsauth module \'student no\' view element.'),
    'weight' => 12,
  );
  $fields['user']['user']['display']['titlename'] = array(
    'label' => t('Job Title'),
    'description' => t('simsauth module \'job title\' view element.'),
    'weight' => 13,
  );
  $fields['user']['user']['display']['classname'] = array(
    'label' => t('Attending Class'),
    'description' => t('simsauth module \'attending class\' view element.'),
    'weight' => 13,
  );
  $fields['user']['user']['display']['proclass'] = array(
    'label' => t('Adoption Class'),
    'description' => t('simsauth module \'adoption class\' view element.'),
    'weight' => 14,
  );
  $fields['user']['user']['display']['seat'] = array(
    'label' => t('Seat No'),
    'description' => t('simsauth module \'seat no\' view element.'),
    'weight' => 14,
  );
  $fields['user']['user']['display']['email'] = array(
    'label' => t('Mail Box'),
    'description' => t('simsauth module \'mail box\' view element.'),
    'weight' => 15,
  );

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function simsauth_user_load(array $entities) {
  $config = \Drupal::config('simsauth.settings');
  if (!($config->get('simsauth.enable'))) return;
  foreach ($entities as $uid => $account) {
    if ($account->get("init") == 'simsauth') {
      $sdate = get_current_seme();
      $found = 0;
      $db2_query = "select * from USER_ACCOUNT as a left join TEABAS as b on a.USERNAME=b.IDNO where b.ATSCHOOL=1 and a.ACCOUNT_NAME=?";
      $rs = db2_query($db2_query, array($account->getAccountName()));
      if (db2_fetch_row($rs)) {
        $found = 1;
      }

      if ($found == 0) {
        $std_ac = $config->get('simsauth.student_account');
        $db2_query = "select * from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=?";
        $rs = db2_query($db2_query, array($account->getAccountName(), $sdate['seyear']));
        if (db2_fetch_row($rs)) {
          $found = 2;
        }
      }
      if ($found == 1) {
        $account->realname = db2_result($rs, 'TEANAME');
        $account->gender = (db2_result($rs, 'TEASEX') == 1) ? t('male') : t('female');
        $account->userclass = 'teacher';
        $account->idno = db2_result($rs, 'IDNO');
        $account->empid = db2_result($rs, 'TEAID');
        $birthday = db2_result($rs, 'BIRTHDAY');
        $account->birthyear = substr($birthday, 0, 4);
        $account->birthmonth = substr($birthday, 4, 2);
        $account->birthday = substr($birthday, -2);
	$account->birthdate = mktime(0, 0, 0, $account->birthmonth, $account->birthday, $account->birthyear);
        foreach (user_roles() as $depname) {
          $db2_query = "select a.POS_ID,a.PROCLASS,b.POS_NAME,b.DEPT_ID,c.DEPT_NAME from TEASRV a left join SCHPOSITION b on a.POS_ID=b.POS_ID left join SCHDEPT c on b.DEPT_ID=c.DEPT_ID where a.TEAID=? and a.SEYEAR=? and a.SESEM=? and c.DEPT_NAME=?";
          $rs2 = db2_query($db2_query, array(
            $account->empid,
            $sdate['year'],
            $sdate['seme'],
            $depname,
          ));
          if (db2_fetch_row($rs2)) {
            $account->proclass = db2_result($rs2, 'PROCLASS');
            $account->depid = db2_result($rs2, 'DEPT_ID');
            $account->depname = db2_result($rs2, 'DEPT_NAME');
            $account->titleid = db2_result($rs2, 'POS_ID');
            $account->titlename = db2_result($rs2, 'POS_NAME');
          }
        }
      }
      elseif ($found == 2) {
        $account->realname = db2_result($rs, 'NAME');
        $account->gender = (db2_result($rs, 'SEX') == 1) ? t('male') : t('female');
        $account->userclass = 'student';
        $account->idno = db2_result($rs, 'IDNO');
        $account->empid = db2_result($rs, 'ID');
        $birthday = db2_result($rs, 'BIRTHDAY');
        $account->birthyear = substr($birthday, 0, 4);
        $account->birthmonth = substr($birthday, 4, 2);
        $account->birthday = substr($birthday, -2);
	$account->birthdate = mktime(0, 0, 0, $account->birthmonth, $account->birthday, $account->birthyear);
        $account->depid = db2_result($rs, 'YEAR') . db2_result($rs, 'CLASSNO');
        $account->stdno = db2_result($rs, 'STDNO');
        $account->class = $account->depid;
        $account->seat = db2_result($rs, 'NO');
        $db2_query = "select CLASSNAME from BASCLS where SEYEAR=? and SESEM=? and CLASSID=?";
        $rs2 = db2_query($db2_query, array(
          $sdate['year'],
          $sdate['seme'],
          $account->depid,
        ));
        if (db2_fetch_row($rs2)) {
          $account->depname = t('Student');
          $account->titlename = db2_result($rs2, 'CLASSNAME');
        }
      }
    }
  }
}

/**
 * Implements hook_user_format_name_alter().
 */
function simsauth_user_format_name_alter(&$name, $account) {
  $config = \Drupal::config('simsauth.settings');
  $account = User::load($account->id());
  if ($account->id() && $account->get("init")->value == 'simsauth') {
    $prefix = '';
    if ($config->get('simsauth.display_depname') && Unicode::strlen($account->depname)) {
      $prefix .= $account->depname . ' ';
    }

    if ($config->get('simsauth.display_title') && Unicode::strlen($account->titlename)) {
      $prefix .= $account->titlename . ' ';
    }

    if (Unicode::strlen($account->realname)) {
      $name = $prefix . $account->realname;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simsauth_form_user_admin_account_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('simsauth.settings');
  if ($config->get('simsauth.enable')) {
    $destination = drupal_get_destination();
    $form['options']['operation']['#default_value'] = 'resetpw';
  }
}

/**
 * Implements hook_user_operations().
 */
function simsauth_user_operations() {
  $config = \Drupal::config('simsauth.settings');
  if ($config->get('simsauth.enable')) {
    $operations['resetpw'] = array(
      'label' => t('Reset passwords of the selected users'),
      'callback' => 'simsauth_user_operations_resetpw',
    );
    return $operations;
  }
}

/**
 * Implements simsauth_user_operations_resetpw().
 */
function simsauth_user_operations_resetpw(array $accounts) {
  $config = \Drupal::config('simsauth.settings');
  $accounts = user_load_multiple($accounts);
  foreach ($accounts as $account) {
    if ($account->get("init") == 'simsauth') {
      $students = array();
      $teachers = array();
      if ($account->userclass == 'teacher') {
        $sql = 'select IDNO from TEABAS where TEAID=?';
        $rs = db2_query($sql, array($account->empid));
        if (db2_fetch_row($rs)) {
          $account->org_pass = db2_result($rs, 0);
          $teachers[] = $account;
        }
      }
      else {
        $std_pw = $config->get('simsauth.student_password');
        $sql = "select $std_pw from STUDENT where ID=?";
        $rs = db2_query($sql, array($account->empid));
        if (db2_fetch_row($rs)) {
          $account->org_pass = db2_result($rs, 0);
          $students[] = $account;
        }
      }
      db2_free_stmt($rs);
    }
  }
  $tea_result = simsauth_teacher_resetpw($teachers);
  $std_result = simsauth_student_resetpw($students);
  $succ = '';
  $error = '';
  foreach ($teachers as $teacher) {
    if (isset($tea_result->success[$teacher->id()]) && $tea_result->success[$teacher->id()]) {
      user_save($teacher, array('pass' => $teacher->org_pass));
      $succ .= $teacher->realname . ',';
    }
    else {
      $error .= $teacher->realname . ',';
    }
  }
  foreach ($students as $student) {
    if (isset($std_result->success[$student->id()]) && $std_result->success[$student->id()]) {
      user_save($student, array('pass' => $student->org_pass));
      $succ .= $student->realname . ',';
    }
    else {
      $error .= $student->realname . ',';
    }
  }
  if ($error) {
    $msg = t('these accounts has failed to reset password:') . substr($error, 0, -1);
    if ($succ) {
      $msg .= ', ' . t('these accounts has successfully to reset the password:') . substr($succ, 0, -1);
    }
    drupal_set_message($msg, 'error');
  }
  else {
    if ($succ) {
      $msg = t('these accounts has successfully to reset the password:') . substr($succ, 0, -1);
    }
    else {
      $msg = t('Can not find the need to reset the password of the accounts.');
    }
    drupal_set_message($msg);
  }
}

/**
 * Implements simsauth_teacher_resetpw().
 */
function simsauth_teacher_resetpw(array $teachers) {
  $result = new stdClass();
  $result->success = array();
  foreach ($teachers as $teacher) {  
    if (ldap_change_pass($teacher->getAccountName(), $teacher->org_pass)) {
      $result->success[$teacher->id()] = TRUE;
    }
  }
  module_invoke_all('simsauth_teacher_resetpw', $teachers, $result);
  return $result;
}

/**
 * Implements simsauth_student_resetpw().
 */
function simsauth_student_resetpw(array $students) {
  $result = new stdClass();
  $result->success = array();
  foreach ($students as $student) {
    $result->success[$student->id()] = TRUE;
  }
  module_invoke_all('simsauth_student_resetpw', $students, $result);
  return $result;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simsauth_form_user_login_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('simsauth.settings');
  if ($config->get('simsauth.enable')) {
    unset($form['links']);
    $name_description = $config->get('simsauth.loginname_desc');
    $pass_description = $config->get('simsauth.password_desc');
    if ($name_description) {
      $form['name']['#description'] = $name_description;
    }
    if ($pass_description) {
      $form['pass']['#description'] = $pass_description;
    }
    if ($config->get('simsauth.personal_data_notice')) {
      $form['extra_info'] = array(
        '#type' => 'markup',
        '#markup' => '<p>' . t('I have read and understood <a href="@url">the policy of the website to collect personal data</a>, I agree to the site to collect my personal information.', array('@url' => url($config->get('simsauth.personal_data_notice_nid')))) . '</p>',
      );
    }
  $form['#validate'] = array(
      '::validateName',
      'simsauth_login_validate',
      '::validateAuthentication',
      '::validateFinal',
    );
  }
}

/**
 * Implements simsauth_login_validate() authenticate a user by sims.
 */
function simsauth_login_validate(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::config('simsauth.settings');
  $username = $form_state->getValue('name');
  $password = trim($form_state->getValue('pass'));
  if (!empty($username) && !empty($password)) {
    $sdate = get_current_seme();
    $found = 0;
    $db2_query = "select * from USER_ACCOUNT as a left join TEABAS as b on a.USERNAME=b.IDNO where b.ATSCHOOL=1 and a.ACCOUNT_NAME=?";
    $rs = db2_query($db2_query, array($username));
    if (db2_fetch_row($rs)) {
      $email = db2_result($rs, 'TEAMAIL');
      $empid = db2_result($rs, 'TEAID');
      $idno = db2_result($rs, 'IDNO');
      $old_pass = db2_result($rs, 'PASSWORD');
      if (ldap_login($idno, $password)) {
        $found = 1;
      }
      db2_free_stmt($rs);
    }

    if ($found == 0) {
      $std_ac = $config->get('simsauth.student_account');
      $std_pw = $config->get('simsauth.student_password');
      $std_ma = $config->get('simsauth.student_mail_account');
      if (!empty($std_ma)) {
        if (!$config->get('simsauth.student_custom_password')) {
          $db2_query = "select MAIL,$std_ma as MAIL_AC from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=? and $std_pw=?";
        }
        else {
          $db2_query = "select MAIL,$std_ma as MAIL_AC from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=?";
        }
      }
      else {
        if (!$config->get('simsauth.student_custom_password')) {
          $db2_query = "select MAIL from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=? and $std_pw=?";
        }
        else {
          $db2_query = "select MAIL from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=?";
        }
      }
      if (!$config->get('simsauth.student_custom_password')) {
        $rs = db2_query($db2_query, array($username, $sdate['seyear'], $password));
      }
      else {
        $rs = db2_query($db2_query, array($username, $sdate['seyear']));
      }
      if (db2_fetch_row($rs)) {
        $email = db2_result($rs, 'MAIL');
        $std_md = $config->get('simsauth.student_mail_address');
        if (!empty($std_ma) && !empty($std_md)) {
          $email = db2_result($rs, 'MAIL_AC') . '@' . $std_md;
        }
        $found = 2;
        db2_free_stmt($rs);
      }
    }
    
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    switch ($found) {
      case 1:
        $user = user_load_by_name($username);
        if (!$user) {
	  $edit = array();
	  $edit['init'] = 'simsauth';
	  $edit['name'] = $username;
	  $edit['mail'] = $email;
	  $edit['pass'] = $password;
	  $edit['status'] = 1;
          $edit['roles'] = array(RoleInterface::AUTHENTICATED_ID);
	  $edit['langcode'] = $language;
	  $edit['preferred_langcode'] = $language;
	  $edit['preferred_admin_langcode'] = $language;
	  $user = User::create();
	  $user->save();
        }
        else {
          if (trim($old_pass) != $password) {
            $result = module_invoke_all('simsauth_sync_password', $user, $password);
            $flag = TRUE;
            foreach ($result as $module => $success) {
              if (!$success) {
                $flag = FALSE;
              }
            }
            if ($flag) {
              if ($config->get('simsauth.sso_ldap_pwd')) {
                if (!ldap_change_pass($username, $password)) {
                  $error .= ldap_error($ldap_conn) . t('change password to LDAP failed!');
                }
                else {
                  $sql = "update USER_ACCOUNT set PASSWORD=? where ACCOUNT_NAME=?";
                  db2_operate($sql, array($password, $username));
                }
              }
            }
            else {
              foreach ($result as $module => $success) {
                if ($success) {
                  module_invoke($module, 'simsauth_sync_password', $user, $old_pass);
                }
              }
            }
            if ($error) {
              drupal_set_message($error, 'error');
            }
	  }
	  $user->setPassword($password);
	  $user->setEmail($email);
        }
        if ($config->get('simsauth.role_evaleverytime')) {
          $all_roles = user_roles(TRUE);
          $admin_role = user_roles(TRUE, 'access administration pages');
	  $admin_rid = key($admin_role);
          $newroles = array();
          if ($user->hasRole($admin_rid)) {
            $newroles[$admin_rid] = $admin_role[$admin_rid];
          }
          $db2_query = "select c.DEPT_NAME from TEASRV a left join SCHPOSITION b on a.POS_ID=b.POS_ID left join SCHDEPT c on b.DEPT_ID=c.DEPT_ID where a.TEAID=? and a.SEYEAR=? and a.SESEM=?";
          $rs2 = db2_query($db2_query, array(
            $empid,
            $sdate['year'],
            $sdate['seme'],
          ));
          while (db2_fetch_row($rs2)) {
	    $rid = trim(db2_result($rs2, 'DEPT_ID'));
	    if ($rid) {
              $data = [ 'id' => $rid, 'label'=> trim(db2_result($rs2, 'DEPT_NAME')) ];
              if (!array_key_exists($data['id'], $all_roles)) {
                $role = Role::create($data);
                $role->save();
              }
              $user->addRole($data['id']);
	    }
          }
          db2_free_stmt($rs2);
          $user->save();
        }
	$form_state->set("uid", $user->id());
        break;

      case 2:
        if ($config->get('simsauth.student_custom_password')) {
          $uid = \Drupal::service('user.auth')->authenticate($username, $password);
          if (!$uid) {
	    break;
          }
        }
        $user = user_load_by_name($username);
        if (!$user) {
	  $edit = array();
	  $edit['init'] = 'simsauth';
	  $edit['name'] = $username;
	  $edit['mail'] = $email;
	  $edit['pass'] = $password;
	  $edit['status'] = 1;
          $edit['roles'] = array(RoleInterface::AUTHENTICATED_ID);
	  $edit['langcode'] = $language;
	  $edit['preferred_langcode'] = $language;
	  $edit['preferred_admin_langcode'] = $language;
	  $user = User::create();
	  $user->save();
        }
        else {
          $user->setPassword($password);
          $user->setEmail($email);
        }
        if ($config->get('simsauth.role_evaleverytime')) {
          $all_roles = user_roles(TRUE);
          $stu_role = [ 'id' => 'student', 'label'=> t('Student') ];
          if (!array_key_exists($stu_role['id'], $all_roles)) {
            $role = create($stu_role);
            $role->save();
          }
          $user->addRole($stu_role['id']);
          $user->save();
        }
	$form_state->set("uid", $user->id());
        break;
    }
  }
}

/**
 * Implements hook_user_login().
 */
function simsauth_user_login($account) {
  $redirect = \Drupal::config('simsauth.settings')->get('simsauth.logingotourl');
  if ($redirect) {
    $response = new RedirectResponse(Url::fromRoute($redirect));
    $response->send();
  }
}

/**
 * Implements hook_user_logout().
 */
function simsauth_user_logout($account) {
  $redirect = \Drupal::config('simsauth.settings')->get('simsauth.logoutgotourl');
  if ($redirect) {
    $response = new RedirectResponse(Url::fromRoute($redirect));
    $response->send();
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function simsauth_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  $config = \Drupal::config('simsauth.settings');
  drupal_set_message($account->get("init"));
  if ($config->get('simsauth.enable') && $account->get("init") == 'simsauth') {
    if ($account->userclass == 'teacher') {
      if ($display->getComponent('birthday')) {
        $build['birthday'] = array(
          '#type' => 'item',
          '#title' => t('Birthday:'),
          '#markup' => Drupal::service('date.formatter')->format($account->birthdate),
        );
      }
      if ($display->getComponent('gender')) {
        $build['gender'] = array(
          '#type' => 'item',
          '#title' => t('Gender:'),
          '#markup' => $account->gender,
        );
      }
      if ($display->getComponent('depname')) {
        $build['depname'] = array(
          '#type' => 'item',
          '#title' => t('Department:'),
          '#markup' => $account->depname,
        );
      }
      if ($display->getComponent('titlename')) {
        $build['titlename'] = array(
          '#type' => 'item',
          '#title' => t('Job Title:'),
          '#markup' => $account->titlename,
        );
      }
      if (!empty($account->proclass) && $display->getComponent('proclass')) {
          $build['proclass'] = array(
            '#type' => 'item',
            '#title' => t('Adoption Class:'),
            '#markup' => $account->proclass,
          );
      }
      if ($display->getComponent('email')) {
        $build['email'] = array(
          '#type' => 'item',
          '#title' => t('Mail Box:'),
          '#markup' => $account->mail,
        );
      }
    }
    if ($account->userclass == 'student') {
      if ($display->getComponent('birthday')) {
        $build['birthday'] = array(
          '#type' => 'item',
          '#title' => t('Birthday:'),
          '#markup' => Drupal::service('date.formatter')->format($account->birthdate),
        );
      }
      if ($display->getComponent('gender')) {
        $build['gender'] = array(
          '#type' => 'item',
          '#title' => t('Gender:'),
          '#markup' => $account->gender,
        );
      }
      if ($display->getComponent('stdno')) {
        $build['stdno'] = array(
          '#type' => 'item',
          '#title' => t('Student No:'),
          '#markup' => $account->stdno,
        );
      }
      if ($display->getComponent('classname')) {
        $build['classname'] = array(
          '#type' => 'item',
          '#title' => t('Attending Class:'),
          '#markup' => $account->titlename,
        );
      }
      if ($display->getComponent('seat')) {
        $build['seat'] = array(
          '#type' => 'item',
          '#title' => t('Seat No:'),
          '#markup' => $account->seat,
        );
      }
      if ($display->getComponent('email')) {
        $build['email'] = array(
          '#type' => 'item',
          '#title' => t('Mail Box:'),
          '#markup' => $account->mail,
        );
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simsauth_form_user_profile_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('simsauth.settings');
  if ($config->get('simsauth.enable') && $form['#user']->get("init") == 'simsauth') {
    $form['account']['mail']['#disabled'] = TRUE;
    $form['account']['mail']['#description'] = t('The email for this account cannot be changed');
    if ($form['#user']->userclass == 'teacher') {
      if (user_access('administer sims authentication') && $config->get('simsauth.sso_ldap_uid')) {
        $form['account']['name']['#description'] = '<div id="simsauth"></div>' . t('The new username will sync to School Information Management System as custom account name.');
        $form['account']['name']['#ajax'] = array('callback' => 'simsauth_ajax_check_duplicate_account');
        $form['#validate'][] = 'simsauth_check_duplicate_account';
        array_unshift($form['#submit'], 'simsauth_sync_username');
      }
      else {
        unset($form['account']['name']);
      }
      if ($config->get('simsauth.sso_ldap_pwd')) {
        $form['account']['pass']['#description'] = t('The new password will sync to School Information Management System.');
        array_unshift($form['#submit'], 'simsauth_sync_password');
      }
      else {
        unset($form['account']['pass']);
      }
    }
    elseif ($form['#user']->userclass == 'student') {
      unset($form['account']['name']);
      if ($config->get('simsauth.student_custom_password')) {
        $form['account']['pass']['#description'] = t('This new password will replace your default password, so you should not forget it.');
      }
      else {
        unset($form['account']['pass']);
      }
    }
  }
}

/**
 * Implements simsauth_ajax_check_duplicate_account().
 */
function simsauth_ajax_check_duplicate_account(array &$form, FormStateInterface $form_state) {
  $commands = array();
  $account = $form_state->getValue('user') ? : \Drupal::currentUser();
  $new_account = trim($form_state->getValue('name'));
  if (strlen($new_account) < 5) {
    $commands[] = ajax_command_invoke("input[name='name']", 'addClass', array('error'));
    $commands[] = ajax_command_html("#simsauth", t('Account name should be more than four characters.'));
    $commands[] = ajax_command_invoke("#simsauth", 'addClass', array('messages error'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }
  if ($new_account && $new_account != $account->getAccountName()) {
    $sql = 'select ACCOUNT_NAME from USER_ACCOUNT where ACCOUNT_NAME=?';
    $rs = db2_query($sql, array($new_account));
    if (db2_fetch_row($rs)) {
      $commands[] = ajax_command_invoke("input[name='name']", 'addClass', array('error'));
      $commands[] = ajax_command_html("#simsauth", t('This name has been taken by another user, please try another one!'));
      $commands[] = ajax_command_invoke("#simsauth", 'addClass', array('messages error'));
      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }
}

/**
 * Implements simsauth_check_duplicate_account().
 */
function simsauth_check_duplicate_account(array &$form, FormStateInterface $form_state) {
  $commands = array();
  $account = $form_state->getValue('user') ? : \Drupal::currentUser();
  $new_account = trim($form_state->getValue('name'));
  if (strlen($new_account) < 5) {
    form_set_error('name', t('Account name should be more than four characters.'));
  }
  if ($new_account && $new_account != $account->getAccountName()) {
    $sql = 'select ACCOUNT_NAME from USER_ACCOUNT where ACCOUNT_NAME=?';
    $rs = db2_query($sql, array($new_account));
    if (db2_fetch_row($rs)) {
      form_set_error('name', t('This name has been taken by another user, please try another one!'));
    }
  }
}

/**
 * Implements simsauth_sync_username() change custom account name for sims.
 */
function simsauth_sync_username(array &$form, FormStateInterface $form_state) {
  global $ldap_conn;
  $account = $form_state->getValue('user') ? : \Drupal::currentUser();
  $error = '';
  $new_account = trim($form_state->getValue('name'));
  $old_account = $account->getAccountName();
  if (!empty($new_account)) {
    $result = module_invoke_all('simsauth_sync_username', $account, $new_account);
    $flag = TRUE;
    foreach ($result as $module => $success) {
      if (!$success) {
        $flag = FALSE;
      }
    }
    if ($flag) {
      if ($config->get('simsauth.sso_ldap_pwd')) {
        if (ldap_change_uid($account->getAccountName(), $new_account)) {
          $sql = 'update USER_ACCOUNT set ACCOUNT_NAME=? where USERNAME=?';
          $result = db2_operate($sql, array($new_account, $account->idno));
          if (!$result) {
            $error .= t('change username to IBM DB2 USER_ACCOUNT table failed!');
	    $flag = FALSE;
	    ldap_change_uid($account->getAccountName(), $old_account);
          }
	  else {
            user_set_authmaps($account, array('authname_simsauth' => $new_account));
	  }
        }
        else {
          $error .= ldap_error($ldap_conn) . t('change username to LDAP uid failed!');
          $flag = FALSE;
        }
      }
    }
    if (!$flag) {
      foreach ($result as $module => $success) {
        if ($success) {
          module_invoke($module, 'simsauth_sync_username', $account, $old_account);
        }
      }
    }
  }
  if ($error) {
    drupal_set_message($error, 'error');
  }
}

/**
 * Implements simsauth_sync_password() change password for sims.
 */
function simsauth_sync_password(array &$form, FormStateInterface $form_state) {
  global $ldap_conn;
  $account = $form_state->getValue('user') ? : \Drupal::currentUser();
  $error = '';
  $new_pass = trim($form_state->getValue('pass'));
  $sql = 'select PASSWORD from USER_ACCOUNT where ACCOUNT_NAME=?';
  $rs = db2_query($sql, array($account->getAccountName()));
  if ($rs) {
    $old_pass = db2_result($rs, 'PASSWORD');
  }
  else {
    $old_pass = $account->idno;
  }
  if (!empty($new_pass)) {
    $result = module_invoke_all('simsauth_sync_password', $account, $new_pass);
    $flag = TRUE;
    foreach ($result as $module => $success) {
      if (!$success) {
        $flag = FALSE;
      }
    }
    if ($flag) {
      if ($config->get('simsauth.sso_ldap_pwd')) {
        if (!ldap_change_pass($account->getAccountName(), $new_pass)) {
          $error .= ldap_error($ldap_conn) . t('change password to LDAP failed!');
        }
        else {
          $sql = "update USER_ACCOUNT set PASSWORD=? where ACCOUNT_NAME=?";
          db2_operate($sql, array($new_pass, $account->getAccountName()));
        }
      }
    }
    else {
      foreach ($result as $module => $success) {
        if ($success) {
          module_invoke($module, 'simsauth_sync_password', $account, $old_pass);
        }
      }
    }
  }
  if ($error) {
    drupal_set_message($error, 'error');
  }
}
