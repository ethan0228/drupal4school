<?php

/**
 * @file
 * sims authentication module for Drupal.
 */

require_once 'sims.api.php';

/**
 * Implements hook_update_projects_alter().
 */
function simsauth_update_projects_alter(&$projects) {
  unset($projects['simsauth']);
}

/**
 * Implements hook_menu().
 */
function simsauth_menu() {
  $items = array();

  $items['admin/config/people/simsauth'] = array(
    'title' => 'SIMS authentication settings',
    'description' => 'Control the various settings of the sims authentication module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simsauth_settings'),
    'access arguments' => array('administer sims authentication'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function simsauth_admin_paths() {
  return array('admin/config/people/simsauth' => TRUE);
}

/**
 * Implements hook_help().
 */
function simsauth_help($path, $arg) {
  switch ($path) {
    case 'admin/config/people/simsauth':
      $output = '<p>' . t('This module integrates Drupal with external authentication to meet the need of Taipei Primary Schools. They use two services to manage their accounts, an IBM DB2 database service for account management server where the users infomation was stored, and a LDAP service for authentication server where stored users passwords.') . '</p>';
      $output .= '<p></p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function simsauth_permission() {
  return array(
    'administer sims authentication' => array(
      'title' => t('Administer sims authentication'),
      'description' => t('Warning: Give to trusted roles only; this permission has security implications.'),
    ),
  );
}

/**
 * Implements hook_user_load().
 */
function simsauth_user_load($accounts) {
  foreach ($accounts as $uid => $account) {
    if (variable_get('simsauth_enable') && simsauth_get_authname($uid)) {
      $sdate = get_current_seme();
      $found = 0;
      $db2_query = "select * from USER_ACCOUNT as a left join TEABAS as b on a.USERNAME=b.IDNO where b.ATSCHOOL=1 and a.ACCOUNT_NAME=?";
      $rs = db2_query($db2_query, array($account->name));
      if (db2_fetch_row($rs)) {
        $found = 1;
      }

      if ($found == 0) {
        $std_ac = variable_get('simsauth_student_account');
        $db2_query = "select * from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=?";
        $rs = db2_query($db2_query, array($account->name, $sdate['seyear']));
        if (db2_fetch_row($rs)) {
          $found = 2;
        }
      }
      if ($found == 0) {
        $account->realname = $account->name;
      }
      else {
        if ($found == 1) {
          $account->realname = db2_result($rs, 'TEANAME');
          $account->gender = (db2_result($rs, 'TEASEX') == 1) ? t('male') : t('female');
          $account->userclass = 'teacher';
          $account->idno = db2_result($rs, 'IDNO');
          $account->empid = db2_result($rs, 'TEAID');
          $birthday = db2_result($rs, 'BIRTHDAY');
          $account->birthyear = substr($birthday, 0, 4);
          $account->birthmonth = substr($birthday, 4, 2);
          $account->birthday = substr($birthday, -2);
          foreach (user_roles() as $depname) {
            $db2_query = "select a.POS_ID,a.PROCLASS,b.POS_NAME,b.DEPT_ID,c.DEPT_NAME from TEASRV a left join SCHPOSITION b on a.POS_ID=b.POS_ID left join SCHDEPT c on b.DEPT_ID=c.DEPT_ID where a.TEAID=? and a.SEYEAR=? and a.SESEM=? and c.DEPT_NAME=?";
            $rs2 = db2_query($db2_query, array(
              $account->empid,
              $sdate['year'],
              $sdate['seme'],
              $depname,
            ));
            if (db2_fetch_row($rs2)) {
              $account->proclass = db2_result($rs2, 'PROCLASS');
              $account->depid = db2_result($rs2, 'DEPT_ID');
              $account->depname = db2_result($rs2, 'DEPT_NAME');
              $account->titleid = db2_result($rs2, 'POS_ID');
              $account->titlename = db2_result($rs2, 'POS_NAME');
            }
          }
        }
        elseif ($found == 2) {
          $account->realname = db2_result($rs, 'NAME');
          $account->gender = (db2_result($rs, 'SEX') == 1) ? t('male') : t('female');
          $account->userclass = 'student';
          $account->idno = db2_result($rs, 'IDNO');
          $account->empid = db2_result($rs, 'ID');
          $birthday = db2_result($rs, 'BIRTHDAY');
          $account->birthyear = substr($birthday, 0, 4);
          $account->birthmonth = substr($birthday, 4, 2);
          $account->birthday = substr($birthday, -2);
          $account->depid = db2_result($rs, 'YEAR') . db2_result($rs, 'CLASSNO');
          $account->stdno = db2_result($rs, 'STDNO');
          $account->class = $account->depid;
          $account->seat = db2_result($rs, 'NO');
          $db2_query = "select CLASSNAME from BASCLS where SEYEAR=? and SESEM=? and CLASSID=?";
          $rs2 = db2_query($db2_query, array(
            $sdate['year'],
            $sdate['seme'],
            $account->depid,
          ));
          if ($rs2) {
            db2_fetch_row($rs2);
            $account->depname = t('Student');
            $account->titlename = db2_result($rs2, 'CLASSNAME');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_username_alter().
 */
function simsauth_username_alter(&$name, $account) {
  static $in_username_alter = FALSE;

  if (empty($account->uid)) {
    return;
  }

  $prefix = '';
  if (variable_get('simsauth_display_depname') && isset($account->depname)) {
    if (drupal_strlen($account->depname)) {
      $prefix .= $account->depname . ' ';
    }
  }

  if (variable_get('simsauth_display_title') && isset($account->titlename)) {
    if (drupal_strlen($account->titlename)) {
      $prefix .= $account->titlename . ' ';
    }
  }

  if (isset($account->realname)) {
    if (drupal_strlen($account->realname)) {
      $name = $prefix . $account->realname;
    }
    return;
  }

  if (!$in_username_alter) {
    $in_username_alter = TRUE;

    if ($realname_account = user_load($account->uid)) {
      simsauth_username_alter($name, $realname_account);
    }

    $in_username_alter = FALSE;
  }
}

/**
 * Implements hook_form_FORM_alter().
 */
function simsauth_form_user_admin_account_alter(&$form, $form_state) {
  if (variable_get('simsauth_enable')) {
    $destination = drupal_get_destination();
    $form['options']['operation']['#default_value'] = 'resetpw';
    $form['accounts']['#header'] = array('org' => array('data' => t('come from'))) + $form['accounts']['#header'];
    foreach ($form['accounts']['#options'] as $uid => $account) {
      $module = db_query('SELECT module FROM {authmap} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
      $form['accounts']['#options'][$uid]['org'] = !empty($module) ? t('@m', array('@m' => $module)) : t('local');
    }
  }
}

/**
 * Implements hook_user_operations().
 */
function simsauth_user_operations() {
  if (variable_get('simsauth_enable')) {
    $operations['resetpw'] = array(
      'label' => t('Reset passwords of the selected users'),
      'callback' => 'simsauth_user_operations_resetpw',
    );
    return $operations;
  }
}

/**
 * Implements simsauth_user_operations_resetpw().
 */
function simsauth_user_operations_resetpw($accounts) {
  $accounts = user_load_multiple($accounts);
  foreach ($accounts as $account) {
    if (simsauth_get_authname($account)) {
      $students = array();
      $teachers = array();
      if ($account->userclass == 'teacher') {
        $sql = 'select IDNO from TEABAS where TEAID=?';
        $rs = db2_query($sql, array($account->empid));
        if (db2_fetch_row($rs)) {
          $org_pass = db2_result($rs, 0);
          $account->org_pass = $org_pass;
          $teachers[] = $account;
        }
      }
      else {
        $std_pw = variable_get('simsauth_student_password');
        $sql = "select $std_pw from STUDENT where ID=?";
        $rs = db2_query($sql, array($account->empid));
        if (db2_fetch_row($rs)) {
          $org_pass = db2_result($rs, 0);
          $account->org_pass = $org_pass;
          $students[] = $account;
        }
      }
      db2_free_stmt($rs);
    }
  }
  $tea_result = simsauth_teacher_resetpw($teachers);
  $std_result = simsauth_student_resetpw($students);
  $succ = '';
  $error = '';
  foreach ($teachers as $teacher) {
    if (isset($tea_result->success[$teacher->uid]) && $tea_result->success[$teacher->uid]) {
      user_save($teacher, array('pass' => $teacher->org_pass));
      $succ .= "$teacher->name,";
    }
    else {
      $error .= "$teacher->name,";
    }
  }
  foreach ($students as $student) {
    if (isset($std_result->success[$student->uid]) && $std_result->success[$student->uid]) {
      user_save($student, array('pass' => $student->org_pass));
      $succ .= "$student->name,";
    }
    else {
      $error .= "$student->name,";
    }
  }
  if ($error) {
    $msg = t('these accounts has failed to reset password:') . substr($error, 0, -1);
    if ($succ) {
      $msg .= ', ' . t('these accounts has successfully to reset the password:') . substr($succ, 0, -1);
    }
    drupal_set_message($msg, 'error');
  }
  else {
    if ($succ) {
      $msg = t('these accounts has successfully to reset the password:') . substr($succ, 0, -1);
    }
    else {
      $msg = t('Can not find the need to reset the password of the accounts.');
    }
    drupal_set_message($msg);
  }
}

/**
 * Implements simsauth_teacher_resetpw().
 */
function simsauth_teacher_resetpw($teachers) {
  $result = new stdClass();
  $result->success = array();
  foreach ($teachers as $teacher) {  
    if (ldap_change_pass($teacher->name, $teacher->org_pass)) {
      $result->success[$teacher->uid] = TRUE;
    }
  }
  module_invoke_all('simsauth_teacher_resetpw', $teachers, $result);
  return $result;
}

/**
 * Implements simsauth_student_resetpw().
 */
function simsauth_student_resetpw($students) {
  $result = new stdClass();
  $result->success = array();
  foreach ($students as $student) {
    $result->success[$student->uid] = TRUE;
  }
  module_invoke_all('simsauth_student_resetpw', $students, $result);
  return $result;
}

/**
 * Implements hook_form_FORM_alter().
 */
function simsauth_form_user_login_alter(&$form, $form_state) {
  if (variable_get('simsauth_enable')) {
    unset($form['links']);
    $name_description = variable_get('simsauth_loginname_desc');
    $pass_description = variable_get('simsauth_password_desc');
    if ($name_description) {
      $form['name']['#description'] = $name_description;
    }
    if ($pass_description) {
      $form['pass']['#description'] = $pass_description;
    }
    if (variable_get('simsauth_personal_data_notice')) {
      $form['extra_info'] = array(
        '#type' => 'markup',
        '#markup' => '<p>' . t('I have read and understood <a href="@url">the policy of the website to collect personal data</a>, I agree to the site to collect my personal information.', array('@url' => url(variable_get('simsauth_personal_data_notice_path')))) . '</p>',
      );
    }
    $form['#validate'] = array(
      'user_login_name_validate',
      'simsauth_login_validate',
      'user_login_final_validate',
    );
  }
  else {
    $form['#validate'] = user_login_default_validators();
  }
}

/**
 * Implements hook_form_FORM_alter().
 */
function simsauth_form_user_login_block_alter(&$form, $form_state) {
  return simsauth_form_user_login_alter($form, $form_state);
}

/**
 * Implements simsauth_login_validate() authenticate a user by sims.
 */
function simsauth_login_validate($form, &$form_state) {
  global $user;
  $username = $form_state['values']['name'];
  $password = trim($form_state['values']['pass']);
  if (!empty($username) && !empty($password)) {
    $sdate = get_current_seme();
    $found = 0;
    $db2_query = "select * from USER_ACCOUNT as a left join TEABAS as b on a.USERNAME=b.IDNO where b.ATSCHOOL=1 and a.ACCOUNT_NAME=?";
    $rs = db2_query($db2_query, array($username));
    if (db2_fetch_row($rs)) {
      $email = db2_result($rs, 'TEAMAIL');
      $empid = db2_result($rs, 'TEAID');
      $idno = db2_result($rs, 'IDNO');
      $old_pass = db2_result($rs, 'PASSWORD');
      if (ldap_login($idno, $password)) {
        $found = 1;
      }
      db2_free_stmt($rs);
    }

    if ($found == 0) {
      $std_ac = variable_get('simsauth_student_account');
      $std_pw = variable_get('simsauth_student_password');
      $std_ma = variable_get('simsauth_student_mail_account');
      if (!empty($std_ma)) {
        if (!variable_get('simsauth_student_custom_password')) {
          $db2_query = "select MAIL,$std_ma as MAIL_AC from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=? and $std_pw=?";
        }
        else {
          $db2_query = "select MAIL,$std_ma as MAIL_AC from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=?";
        }
      }
      else {
        if (!variable_get('simsauth_student_custom_password')) {
          $db2_query = "select MAIL from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=? and $std_pw=?";
        }
        else {
          $db2_query = "select MAIL from STUDENT where STATUS=0 and $std_ac=? and SEYEAR>=?";
        }
      }
      if (!variable_get('simsauth_student_custom_password')) {
        $rs = db2_query($db2_query, array($username, $sdate['seyear'], $password));
      }
      else {
        $rs = db2_query($db2_query, array($username, $sdate['seyear']));
      }
      if (db2_fetch_row($rs)) {
        $email = db2_result($rs, 'MAIL');
        $std_md = variable_get('simsauth_student_mail_address');
        if (!empty($std_ma) && !empty($std_md)) {
          $email = db2_result($rs, 'MAIL_AC') . '@' . $std_md;
        }
        $found = 2;
        db2_free_stmt($rs);
      }
    }

    switch ($found) {
      case 1:
        $user = user_external_load($username);
        if (!$user) {
          $userinfo = array(
            'name' => $username,
            'mail' => $email,
            'pass' => $password,
            'init' => ($email) ? $email : $username,
            'status' => 1,
            'access' => REQUEST_TIME,
          );
        }
        else {
          if (trim($old_pass) != $password) {
            $result = module_invoke_all('simsauth_sync_password', $user, $password);
            $flag = TRUE;
            foreach ($result as $module => $success) {
              if (!$success) {
                $flag = FALSE;
              }
            }
            if ($flag) {
              if (variable_get('simsauth_sso_ldap')) {
                if (!ldap_change_pass($username, $password)) {
                  $error .= ldap_error($ldap_conn) . t('change password to LDAP failed!');
                }
                else {
                  $sql = "update USER_ACCOUNT set PASSWORD=? where ACCOUNT_NAME=?";
                  db2_operate($sql, array($password, $username));
                }
              }
            }
            else {
              foreach ($result as $module => $success) {
                if ($success) {
                  module_invoke($module, 'simsauth_sync_password', $user, $old_pass);
                }
              }
            }
            if ($error) {
              drupal_set_message($error, 'error');
            }
	  }
          $userinfo = array(
            'pass' => $password,
            'mail' => $email,
          );
        }
        if (variable_get('simsauth_role_evaleverytime')) {
          $all_roles = user_roles(TRUE);
          $admin_role = user_roles(TRUE, 'access administration pages');
          if (!$user) {
            $newroles = array();
          }
          else {
            if (in_array(current($admin_role), array_values($user->roles))) {
              $newroles[key($admin_role)] = current($admin_role);
            }
            else {
              $newroles = array();
            }
          }
          $db2_query = "select c.DEPT_NAME from TEASRV a left join SCHPOSITION b on a.POS_ID=b.POS_ID left join SCHDEPT c on b.DEPT_ID=c.DEPT_ID where a.TEAID=? and a.SEYEAR=? and a.SESEM=?";
          $rs2 = db2_query($db2_query, array(
            $empid,
            $sdate['year'],
            $sdate['seme'],
          ));
          while (db2_fetch_row($rs2)) {
            $depname = db2_result($rs2, 'DEPT_NAME');
            if (!in_array($depname, $all_roles)) {
              $role = new stdClass();
              $role->name = $depname;
              user_role_save($role);
              $all_roles = user_roles(TRUE);
            }
            if ($rid = array_search($depname, $all_roles)) {
              $newroles[$rid] = $all_roles[$rid];
            }
          }
          db2_free_stmt($rs2);
          $userinfo['roles'] = $newroles;
        }
        if (!$user) {
          $user = user_save(drupal_anonymous_user(), $userinfo);
          user_set_authmaps($user, array('authname_simsauth' => $username));
        }
        else {
          $user = user_save($user, $userinfo);
          $user = user_load($user->uid);
        }
        $form_state['uid'] = $user->uid;
        $form_state['redirect'] = (variable_get('simsauth_logingotourl')) ? variable_get('simsauth_logingotourl') : '<front>';
        user_login_finalize($form_state);
        drupal_goto($form_state['redirect']);
        break;

      case 2:
        $user = user_external_load($username);
        if (!$user) {
          $userinfo = array(
            'name' => $username,
            'mail' => $email,
            'pass' => $password,
            'init' => ($email) ? $email : $username,
            'status' => 1,
            'access' => REQUEST_TIME,
          );
        }
        else {
          if (variable_get('simsauth_student_custom_password')) {
	    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
            if (user_check_password($password, $user)) {
              $userinfo = array(
                'pass' => $password,
                'mail' => $email,
              );
            }
            else {
              $form_state['uid'] = FALSE;
              break;
            }
          }
	  else {
            $userinfo = array(
              'pass' => $password,
              'mail' => $email,
            );
          }
        }
        if (variable_get('simsauth_role_evaleverytime')) {
          $all_roles = user_roles(TRUE);
          if ($rid = array_search(t('Student'), $all_roles)) {
            $newroles = array($rid => $all_roles[$rid]);
            $userinfo['roles'] = $newroles;
          }
        }
        if (!$user) {
          $user = user_save(drupal_anonymous_user(), $userinfo);
          user_set_authmaps($user, array('authname_simsauth' => $username));
        }
        else {
          user_save($user, $userinfo);
          $user = user_load($use->uid);
        }
        $form_state['uid'] = $user->uid;
        $form_state['redirect'] = (variable_get('simsauth_logingotourl')) ? variable_get('simsauth_logingotourl') : '<front>';
        user_login_finalize($form_state);
        drupal_goto($form_state['redirect']);
        break;

      default:
        $form_state['uid'] = FALSE;
    }
  }
  if (empty($form_state['uid']) && variable_get('simsauth_allowdefaultlogin', TRUE)) {
    user_login_authenticate_validate($form, $form_state);
  }
}

/**
 * Implements hook_menu_alter().
 */
function simsauth_menu_alter(&$items) {
  if (variable_get('simsauth_enable')) {
    unset($items['node/register']);
  }
}

/**
 * Implements hook_user_view().
 */
function simsauth_user_view($account) {
  global $user;
  if (variable_get('simsauth_enable') && simsauth_get_authname($account->uid) && $user->uid == $account->uid) {
    $fields = array();
    if ($account->userclass == 'teacher') {
      $account->content['sims'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('SIMS Infomation'),
      );
      $account->content['sims']['birthday'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Birthday:'),
        '#markup' => $account->birthyear . '/' . $account->birthmonth . '/' . $account->birthday,
      );
      $account->content['sims']['gender'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Gender:'),
        '#markup' => $account->gender,
      );
      $account->content['sims']['depname'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Department:'),
        '#markup' => $account->depname,
      );
      $account->content['sims']['titlename'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Job Title:'),
        '#markup' => $account->titlename,
      );
      if (!empty($account->proclass)) {
        $account->content['sims']['proclass'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Adoption Class:'),
          '#markup' => $account->proclass,
        );
      }
      $account->content['sims']['email'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Mail Box:'),
        '#markup' => $account->mail,
      );
    }
    if ($account->userclass == 'student') {
      $account->content['sims'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('SIMS Infomation'),
      );
      $account->content['sims']['birthday'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Birthday:'),
        '#markup' => $account->birthyear . '/' . $account->birthmonth . '/' . $account->birthday,
      );
      $account->content['sims']['gender'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Gender:'),
        '#markup' => $account->gender,
      );
      $account->content['sims']['stdno'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Student No:'),
        '#markup' => $account->stdno,
      );
      $account->content['sims']['classname'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Attending Class:'),
        '#markup' => $account->titlename,
      );
      $account->content['sims']['seat'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Seat No:'),
        '#markup' => $account->seat,
      );
      $account->content['sims']['email'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Mail Box:'),
        '#markup' => $account->mail,
      );
    }
  }
}

/**
 * Implements hook_user_profile_form_alter().
 */
function simsauth_form_user_profile_form_alter(&$form, $form_state) {
  if (variable_get('simsauth_enable') && simsauth_get_authname($form['#user']->uid)) {
    $form['account']['mail']['#disabled'] = TRUE;
    $form['account']['mail']['#description'] = t('The email for this account cannot be changed');
    if ($form['#user']->userclass == 'teacher') {
      if (user_access('administer sims authentication') && variable_get('simsauth_sso_ldap_uid')) {
        $form['account']['name']['#description'] = '<div id="simsauth"></div>' . t('The new username will sync to School Information Management System as custom account name.');
        $form['account']['name']['#ajax'] = array('callback' => 'simsauth_ajax_check_duplicate_account');
        $form['#validate'][] = 'simsauth_check_duplicate_account';
        array_unshift($form['#submit'], 'simsauth_sync_username');
      }
      else {
        unset($form['account']['name']);
      }
      if (variable_get('simsauth_sso_ldap')) {
        $form['account']['pass']['#description'] = t('The new password will sync to School Information Management System.');
        array_unshift($form['#submit'], 'simsauth_sync_password');
      }
      else {
        unset($form['account']['pass']);
      }
    }
    elseif ($form['#user']->userclass == 'student') {
      unset($form['account']['name']);
      if (variable_get('simsauth_student_custom_password')) {
        $form['account']['pass']['#description'] = t('This new password will replace your default password, so you should not forget it.');
      }
      else {
        unset($form['account']['pass']);
      }
    }
  }
}

/**
 * Implements simsauth_ajax_check_duplicate_account().
 */
function simsauth_ajax_check_duplicate_account($form, &$form_state) {
  global $user;
  $commands = array();
  if (isset($form_state['user'])) {
    $account = $form_state['user'];
  }
  else {
    $account = $user;
  }
  $new_account = trim($form_state['values']['name']);
  if (strlen($new_account) < 5) {
    $commands[] = ajax_command_invoke("input[name='name']", 'addClass', array('error'));
    $commands[] = ajax_command_html("#simsauth", t('Account name should be more than four characters.'));
    $commands[] = ajax_command_invoke("#simsauth", 'addClass', array('messages error'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }
  if ($new_account && $new_account != $account->name) {
    $sql = 'select ACCOUNT_NAME from USER_ACCOUNT where ACCOUNT_NAME=?';
    $rs = db2_query($sql, array($new_account));
    if (db2_fetch_row($rs)) {
      $commands[] = ajax_command_invoke("input[name='name']", 'addClass', array('error'));
      $commands[] = ajax_command_html("#simsauth", t('This name has been taken by another user, please try another one!'));
      $commands[] = ajax_command_invoke("#simsauth", 'addClass', array('messages error'));
      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }
}

/**
 * Implements simsauth_check_duplicate_account().
 */
function simsauth_check_duplicate_account($form, &$form_state) {
  global $user;
  $commands = array();
  if (isset($form_state['user'])) {
    $account = $form_state['user'];
  }
  else {
    $account = $user;
  }
  $new_account = trim($form_state['values']['name']);
  if (strlen($new_account) < 5) {
    form_set_error('name', t('Account name should be more than four characters.'));
  }
  if ($new_account && $new_account != $account->name) {
    $sql = 'select ACCOUNT_NAME from USER_ACCOUNT where ACCOUNT_NAME=?';
    $rs = db2_query($sql, array($new_account));
    if (db2_fetch_row($rs)) {
      form_set_error('name', t('This name has been taken by another user, please try another one!'));
    }
  }
}

/**
 * Implements simsauth_sync_username() change custom account name for sims.
 */
function simsauth_sync_username($form, &$form_state) {
  global $user;
  global $ldap_conn;
  if (isset($form_state['user'])) {
    $account = $form_state['user'];
  }
  else {
    $account = $user;
  }
  $error = '';
  $new_account = trim($form_state['values']['name']);
  $old_account = $account->name;
  if (!empty($new_account)) {
    $result = module_invoke_all('simsauth_sync_username', $account, $new_account);
    $flag = TRUE;
    foreach ($result as $module => $success) {
      if (!$success) {
        $flag = FALSE;
      }
    }
    if ($flag) {
      if (variable_get('simsauth_sso_ldap')) {
        if (ldap_change_uid($account->name, $new_account)) {
          $sql = 'update USER_ACCOUNT set ACCOUNT_NAME=? where USERNAME=?';
          $result = db2_operate($sql, array($new_account, $account->idno));
          if (!$result) {
            $error .= t('change username to IBM DB2 USER_ACCOUNT table failed!');
	    $flag = FALSE;
	    ldap_change_uid($account->name, $old_account);
          }
	  else {
            user_set_authmaps($account, array('authname_simsauth' => $new_account));
	  }
        }
        else {
          $error .= ldap_error($ldap_conn) . t('change username to LDAP uid failed!');
          $flag = FALSE;
        }
      }
    }
    if (!$flag) {
      foreach ($result as $module => $success) {
        if ($success) {
          module_invoke($module, 'simsauth_sync_username', $account, $old_account);
        }
      }
    }
  }
  if ($error) {
    drupal_set_message($error, 'error');
  }
}

/**
 * Implements simsauth_sync_password() change password for sims.
 */
function simsauth_sync_password($form, &$form_state) {
  global $user;
  global $ldap_conn;
  if (isset($form_state['user'])) {
    $account = $form_state['user'];
  }
  else {
    $account = $user;
  }
  $error = '';
  $new_pass = trim($form_state['values']['pass']);
  $sql = 'select PASSWORD from USER_ACCOUNT where ACCOUNT_NAME=?';
  $rs = db2_query($sql, array($account->name));
  if ($rs) {
    $old_pass = db2_result($rs, 'PASSWORD');
  }
  else {
    $old_pass = $account->idno;
  }
  if (!empty($new_pass)) {
    $result = module_invoke_all('simsauth_sync_password', $account, $new_pass);
    $flag = TRUE;
    foreach ($result as $module => $success) {
      if (!$success) {
        $flag = FALSE;
      }
    }
    if ($flag) {
      if (variable_get('simsauth_sso_ldap')) {
        if (!ldap_change_pass($account->name, $new_pass)) {
          $error .= ldap_error($ldap_conn) . t('change password to LDAP failed!');
        }
        else {
          $sql = "update USER_ACCOUNT set PASSWORD=? where ACCOUNT_NAME=?";
          db2_operate($sql, array($new_pass, $account->name));
        }
      }
    }
    else {
      foreach ($result as $module => $success) {
        if ($success) {
          module_invoke($module, 'simsauth_sync_password', $account, $old_pass);
        }
      }
    }
  }
  if ($error) {
    drupal_set_message($error, 'error');
  }
}

/**
 * Implements settings for the module.
 */
function simsauth_settings() {
  $error = '';
  if (!extension_loaded('ibm_db2')) {
    $error .= '<li>' . t('IBM DB2 client driver(V9.5 above)') . l(t('if you use linux x64, you can download it here!'), 'https://www.dropbox.com/s/ojzgxh99cypdq9l/v9.7fp10_linuxx64_dsdriver.tar.gz?dl=0') . '</li>';
    $error .= '<li>' . t('ibm-db2 module for php(PEAR package)') . '</li>';
  }
  if (!function_exists('ldap_connect')) {
    $error .= '<li>' . t('php-ldap or php5-ldap module') . '</li>';
  }
  if ($error != '') {
    drupal_set_message(t('Before enable this drupal project, you must install:') . '<ul>' . $error . '</ul>', 'warning');
  }

  $form['simsauth_setup'] = array(
    '#type' => 'fieldset',
    '#title' => t('Account Management Server Setup'),
    '#collapsible' => FALSE,
    '#description' => t('How to install ibm_db2 module:<ol><li>Disable selinux:<br>vi /etc/selinux/config<br>SELINUX=disabled</li><li>Install packages:<br>yum install gcc ksh zip php-pear</li><li>Make directory:<br>mkdir /opt/ibm</li><li>Decompress dsdriver at /opt/ibm/:<br>tar -xvf the-package-download-from-ibm-com_dsdriver.tar.gz</li><li>Change permission for the instalation script in /opt/ibm/dsdriver:<br>chmod 755 installDSDriver</li><li>Run the installation script:<br>cd /opt/ibm/dsdriver<br>./installDSDriver</li><li>Download and install the driver using the pecl:<br>pecl install ibm_db2</li><li>Configure the installation directory:<br>DB2 Installation Directory? : /opt/ibm/dsdriver</li><li>Change php.ini add one line:<br>extension = ibm_db2.so</li><li>Reboot the Apache:<br>service httpd restart</li></ol>'),
  );
  $form['simsauth_setup']['simsauth_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Account Management Server'),
    '#default_value' => variable_get('simsauth_server'),
    '#description' => t('Your IBM DB2 server DNS record or NAT IP. Do not input NIC IP, You should not allow the connection pass throught the edge firewall.'),
    '#required' => TRUE,
  );
  $form['simsauth_setup']['simsauth_server_port'] = array(
    '#type' => 'textfield',
    '#title' => t('IBM DB2 Server Port'),
    '#default_value' => variable_get('simsauth_server_port', 50000),
    '#description' => t('Which port is the IBM DB2 server connection port?'),
    '#required' => TRUE,
  );
  $form['simsauth_setup']['simsauth_database'] = array(
    '#type' => 'textfield',
    '#title' => t('IBM DB2 Database Name'),
    '#default_value' => variable_get('simsauth_database', 'SCHOOL01'),
    '#description' => t('Which database to bind?'),
    '#required' => TRUE,
  );
  $form['simsauth_setup']['simsauth_server_schema'] = array(
    '#type' => 'textfield',
    '#title' => t('IBM DB2 Database Schema'),
    '#default_value' => variable_get('simsauth_server_schema'),
    '#description' => t('Which schema to log in the server?'),
    '#required' => TRUE,
  );

  $form['simsauth_ldap'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication Server Setup'),
    '#collapsible' => FALSE,
  );
  $form['simsauth_ldap']['simsauth_server_ldap'] = array(
    '#type' => 'textfield',
    '#title' => t('Authentication Server'),
    '#default_value' => variable_get('simsauth_server_ldap'),
    '#description' => t('Your LDAP server DNS record or NAT IP. Usually same as IBM DB2 Server.'),
    '#required' => TRUE,
  );
  $form['simsauth_ldap']['simsauth_server_ldap_port'] = array(
    '#type' => 'textfield',
    '#title' => t('LDAP Server Port'),
    '#default_value' => variable_get('simsauth_server_ldap_port', 389),
    '#description' => t('Which port is the LDAP server query port?'),
    '#required' => TRUE,
  );
  $form['simsauth_ldap']['simsauth_server_ldap_basedn'] = array(
    '#type' => 'textfield',
    '#title' => t('LDAP Base DN'),
    '#default_value' => variable_get('simsauth_server_ldap_basedn', 'ou=school,dc=developer,dc=alle,dc=com'),
    '#description' => t('Please input the Base DN that containing user entries.'),
    '#required' => TRUE,
  );

  $form['simsauth_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Info and Syncing'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['simsauth_user']['message'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('In IBM DB2 database, the students have no department(table name: SCHDEPT) and job title(table name: SCHPOSITION), so this module will use [Student] as their department, and use their current attending class name as their job title. When you enable role sync function, the department come from DB2 SCHDEPT table will sync to drupal roles immediate, no matter has account in there or not. When user log in they will not automatic assign to the roles, unless you enable [evaluate user roles when they login] function before that. The automatic evaluate function will skip the administer role, so if you assigned someone to be an administer manually, they will always be an administer, until you revoke them manually.') . '</p>',
  );
  $form['simsauth_user']['simsauth_display_depname'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display department name in front of the user`s realname.'),
    '#default_value' => variable_get('simsauth_display_depname', TRUE),
    '#description' => t('Check this box if you want to display department name of user in front of the user`s realname.'),
  );
  $form['simsauth_user']['simsauth_display_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display job title in front of the user`s realname.'),
    '#default_value' => variable_get('simsauth_display_title', FALSE),
    '#description' => t('Check this box if you want to display job title of user in front of the user`s realname but after the department name.'),
  );
  $form['simsauth_user']['simsauth_role_sync'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatic role population from IBM DB2 database'),
    '#default_value' => variable_get('simsauth_role_sync', TRUE),
    '#description' => t('Automatically created role basis the school department.'),
  );
  $form['simsauth_user']['simsauth_role_evaleverytime'] = array(
    '#type' => 'checkbox',
    '#title' => t('Evaluate user roles when they login.'),
    '#default_value' => variable_get('simsauth_role_evaleverytime', FALSE),
    '#description' => t('NOTE: This means users could loose any roles (except administer role) that have been assigned manually in Drupal.'),
  );
  $form['simsauth_user']['simsauth_sso_ldap_uid'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Sync Account Name to LDAP Server.'),
    '#default_value' => variable_get('simsauth_sso_ldap_uid', FALSE),
    '#description' => t('Check this box if you want to let people set account name back to IBM DB2 database and LDAP Server. Disabling this to prevent change name from the user profile form.'),
  );
  $form['simsauth_user']['simsauth_sso_ldap'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Sync Password to LDAP Server.'),
    '#default_value' => variable_get('simsauth_sso_ldap', FALSE),
    '#description' => t('Check this box if you want to let people set passwords back to LDAP Server. Disabling this to prevent change password from the user profile form.'),
  );

  $form['simsauth_std'] = array(
    '#type' => 'fieldset',
    '#title' => t('Account Setting for Students'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['simsauth_std']['message'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('In IBM DB2 database, the students have not their own account record, so this module will use the STDNO as their account, and use the last 6 digitals of their security ID as their password. But You can change them below anyway. The email address take from STUDENT table there has a field named MAIL. If your school provided another email service to students, please input the mail address prefix and suffix below, or just leave them blank to use the data come from MAIL field.') . '</p>',
  );
  $form['simsauth_std']['simsauth_student_account'] = array(
    '#type' => 'textfield',
    '#title' => t('Students Default Account Name'),
    '#default_value' => variable_get('simsauth_student_account', 'STDNO'),
    '#description' => t('The SQL statement of data field to use as account name. Usually input the field name like STDNO, If you want combind multiple field use ||(double pipe) to concat strings, Example: YEAR||CLASSNO||SEAT.'),
    '#required' => TRUE,
  );
  $form['simsauth_std']['simsauth_student_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Students Default Password'),
    '#default_value' => variable_get('simsauth_student_password', 'right(IDNO,6)'),
    '#description' => t('The SQL statement of data field to use as password. Usually input the field name like STDNO, If you want combind multiple field use ||(double pipe) to concat strings, Example: YEAR||CLASSNO||SEAT.'),
    '#required' => TRUE,
  );
  $form['simsauth_std']['simsauth_student_custom_password'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow students to custom their own password'),
    '#default_value' => variable_get('simsauth_student_custom_password', FALSE),
  );
  $form['simsauth_std']['simsauth_student_mail_account'] = array(
    '#type' => 'textfield',
    '#title' => t('Student mail address prefix'),
    '#default_value' => variable_get('simsauth_student_mail_account'),
    '#description' => t('The SQL statement of data field to use as email address part before @.  Usually input the field name, If you want combind multiple field use ||(double pipe) to concat strings, Example: YEAR||CLASSNO||SEAT.'),
  );
  $form['simsauth_std']['simsauth_student_mail_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Student mail address suffix'),
    '#default_value' => variable_get('simsauth_student_mail_address'),
    '#description' => t('The student email address part after @. If your school have using Google Apps service, you should input the Google Apps domain name.'),
  );

  $form['simsauth_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['simsauth_auth']['simsauth_loginname_desc'] = array(
    '#type' => 'textfield',
    '#title' => t('Login Form Name Description'),
    '#default_value' => variable_get('simsauth_loginname_desc'),
    '#description' => t('Input the message to let user know they should login with their custom account name of School Information Management System.'),
  );
  $form['simsauth_auth']['simsauth_password_desc'] = array(
    '#type' => 'textfield',
    '#title' => t('Login Form Password Description'),
    '#default_value' => variable_get('simsauth_password_desc'),
    '#description' => t('Input the message to let user know they should login with their School Information Management System password.'),
  );
  $form['simsauth_auth']['simsauth_allowdefaultlogin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow authentication with local Drupal accounts'),
    '#default_value' => variable_get('simsauth_allowdefaultlogin', TRUE),
    '#description' => t('Check this box if you want to let people log in with local Drupal accounts (without using simsauth module).'),
  );
  $form['simsauth_auth']['simsauth_allowdefaultlogin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow authentication with local Drupal accounts'),
    '#default_value' => variable_get('simsauth_allowdefaultlogin', TRUE),
    '#description' => t('Check this box if you want to let people log in with local Drupal accounts (without using simsauth module).'),
  );
  $form['simsauth_auth']['simsauth_logingotourl'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally, specify a URL for users to go to after logging in'),
    '#default_value' => variable_get('simsauth_logingotourl', ''),
    '#description' => t('Example:') . 'node/news',
  );
  $form['simsauth_auth']['simsauth_personal_data_notice'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show personal data notice link'),
    '#default_value' => variable_get('simsauth_personal_data_notice', FALSE),
    '#description' => t('Check this box if you want to display personal data notice link to users.'),
  );
  $form['simsauth_auth']['simsauth_personal_data_notice_path'] = array(
    '#type' => 'textfield',
    '#title' => t('specify a URL link to the personal data notice page when user is logging in.'),
    '#default_value' => variable_get('simsauth_personal_data_notice_path', ''),
    '#description' => t('Example:') . 'node/100',
    '#states' => array (
      'invisible' => array(
        ':input[name="simsauth_personal_data_notice"]' => array( 'checked' => FALSE),
      ),
    ),
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save sims configuration'),
  );
  $form['#submit'] = array('simsauth_server_test');
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }

  return $form;
}

/**
 * Implements simsauth_server_test().
 */
function simsauth_server_test($form, &$form_state) {
  $error = '';
  form_state_values_clean($form_state);
  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    variable_set($key, trim($value));
  }

  $hostname = variable_get('simsauth_server');
  $port = variable_get('simsauth_server_port');
  $user = variable_get('simsauth_server_admin');
  $password = variable_get('simsauth_server_pass');
  $schema = variable_get('simsauth_server_schema');
  $database = variable_get('simsauth_database');
  $conn_string = "DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;HOSTNAME=$hostname;PORT=$port;PROTOCOL=TCPIP;UID=$user;PWD=$password;CurrentSchema=$schema;";
  variable_set('simsauth_connect_string', $conn_string);
  if (db2_test()) {
    if (variable_get('simsauth_role_sync')) {
      $all_roles = user_roles(TRUE);
      $role = new stdClass();
      $role->name = t('Student');
      if (!in_array($role->name, $all_roles)) {
        user_role_save($role);
      }
      $db2_query = 'select * from SCHDEPT where STATUS=1 order by DEPT_ID DESC';
      $rs = db2_query($db2_query);
      while (db2_fetch_row($rs)) {
        $role = new stdClass();
        $role->name = trim(db2_result($rs, 'DEPT_NAME'));
        if (!in_array($role->name, $all_roles)) {
          user_role_save($role);
        }
      }
      db2_free_result($rs);
    }
  }
  else {
    $error .= $conn_string . '<br />' . t('IBM DB2 Database connection failed.');
  }
  $ret = ldap_test();
  if ($ret == 2) {
    $error .= t('LDAP server connected but can not login.');
  }
  if ($ret == 1) {
    $error .= t('LDAP server connecting failed.');
  }

  if ($error != '') {
    drupal_set_message($error . t('The configuration options have been saved, but you should check again!'), 'error');
    variable_set('simsauth_enable', FALSE);
  }
  else {
    drupal_set_message(t('The Server configure was setting perfectly. The configuration options have been saved.'));
    variable_set('simsauth_enable', TRUE);
  }
}

/**
 * Returns authname from the authmap table for a variant input.
 *
 * @param variant $data
 *   A variant input. Allowed variable types:
 *   - object: user account object
 *   - integer: user id
 *   - string: username
 */
function simsauth_get_authname($data) {
  if (!variable_get('simsauth_enable')) return NULL;
  $cache = &drupal_static(__FUNCTION__, array());

  $authname = NULL;
  $uid = NULL;

  if (is_object($data)) {
    if (!empty($data->uid)) {
      $uid = $data->uid;
    }
  }
  elseif (is_numeric($data) && intval($data) == $data) {
    if ($data > 0) {
      $uid = $data;
    }
  }
  elseif (is_string($data)) {
    $account = user_load_by_name($data);
    if (!empty($account->uid)) {
      $uid = $account->uid;
    }
  }

  if (empty($uid)) {
    return NULL;
  }

  if (!array_key_exists($uid, $cache)) {
    $authname = db_query('SELECT authname FROM {authmap} WHERE uid = :uid AND module = :module', array(
      ':uid' => $uid,
      ':module' => 'simsauth',
    ))->fetchField();

    $cache[$uid] = !empty($authname) ? $authname : NULL;
  }

  return $cache[$uid];
}
